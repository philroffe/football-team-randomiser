<!DOCTYPE html>
<html lang="en">
<head>
  <%- include ("../partials/header.ejs") %>
  <script src="/echarts.min.js"></script>
</head>

<body style="height: 100%; margin: 0">
  <%- include ("../partials/nav.ejs") %>
  <!-- Page content -->
  <div class="w3-content" style="max-width:2000px;margin-top:0px;margin-left: 10px;">

<!-- <div id="year">
  <h3>Month: 
  <input type="month" class="gameMonthInput" id="gameMonthInput" name="start" min="2022-03" value="2022-04">
  </h3>
</div> -->
    
  <div id="chart1Container" style="height: 40px"></div>
  <h3 id="alltimegames">Games Played (since Aug 2019) </div>
  <div id="chart2Container" style="height: 800px; max-width: 100&"></div>

  <script type="text/javascript">
    // annoying workaround to some mumbo-jumbo to convert a valid object client-side ()
    var pagedata =  JSON.parse("<%= JSON.stringify(pageData) %>".replace(/&#34;/g, '"').replace(/&#39;/g, "'"));

    var monthDateFormat = new Intl.DateTimeFormat('en', { month: 'long' });
    var monthShortDateFormat = new Intl.DateTimeFormat('en', { month: 'short' });
    var monthDateNumericFormat = new Intl.DateTimeFormat('en', { month: '2-digit' });
    var dayDateFormat = new Intl.DateTimeFormat('en', { day: '2-digit' });

    var players = pagedata.data.players;
    if (!players) { players = {}; }
    var attendanceByYearMap = pagedata.data.attendanceByYear;
    if (!attendanceByYearMap) { attendanceByYearMap = {}; }
    var paydetailsMap = pagedata.data.paydetails;
    if (!paydetailsMap) { paydetailsMap = {}; }

    var playerAliasMaps = pagedata.data.playerAliasMaps;
    var playerToAliasMap = playerAliasMaps["playerToAliasMap"];
    var aliasToPlayerMap = playerAliasMaps["aliasToPlayerMap"];
    var playerNameSuggestions = Array.from(Object.keys(playerToAliasMap));
    //console.log("PLAYER NAME SUGGESTIONS:" + JSON.stringify(playerNameSuggestions));

    var dom = document.getElementById('chart2Container');
    var myChart = echarts.init(dom, null, {
      renderer: 'canvas',
      useDirtyRect: false
    });
    var app = {};
    var ROOT_PATH = 'https://echarts.apache.org/examples';
    var option;

    const updateFrequency = 400;
    const dimension = 0;
    const playerColors = {
      "Phil R": 'darkgreen',
      "Dan A": 'lightgreen',
      "Rich M": 'orange',
      "Liam O": 'blue',
    };


    var fullPlayerList = {};
    //for (var year = 2020; year < 2024; year ++) {
    Object.keys(attendanceByYearMap).sort().forEach(function(year) {
      var currentYearMap = attendanceByYearMap[year];
      //for (var month = 1; month < 13; month ++) {
      Object.keys(currentYearMap).sort().forEach(function(month) {
        Object.keys(currentYearMap[month]).sort().forEach(function(playerName) {
          fullPlayerList[playerName] = true;
        })
      })
    })

    var data = [];
    var cumulativeGames = {};
    var count = 0;
    //for (var year = 2020; year < 2024; year ++) {
    Object.keys(attendanceByYearMap).sort().forEach(function(year) {
      var currentYearMap = attendanceByYearMap[year];
      //for (var month = 1; month < 13; month ++) {
      Object.keys(currentYearMap).sort().forEach(function(month) {
        //Object.keys(currentYearMap[month]).sort().forEach(function(playerName) {
        var currentMonthMap = currentYearMap[month];
        //for (var games = 0; games < 6; games ++) {
          
        mondaysDates = mondaysInMonth(month, year);  //=> [ 7,14,21,28 ]
        for (var games = 0; games < mondaysDates.length; games ++) {
          const date = new Date(Date.UTC(year, month-1, mondaysDates[games], 1, 0, 0, 0));

        Object.keys(fullPlayerList).sort().forEach(function(playerName) {
          var officialPlayerName = getOfficialNameFromAlias(playerName, aliasToPlayerMap);
          if (!officialPlayerName) {
            officialPlayerName = playerName;
          }
          if (playerName == "Dean") {
            console.log("PPPPPPPP", playerName, officialPlayerName)
          }
          var playerCumulativeGames = cumulativeGames[officialPlayerName];
          if (!playerCumulativeGames) {
            playerCumulativeGames = 0;
          }

          //var numberOfGamesInMonth = 0;
          if (currentMonthMap[playerName]) {
            // count the number of games that they actively played
            //Object.keys(currentMonthMap[playerName]).sort().forEach(function(games) {
            //for (var games = 0; games < 6; games ++) {

              if (currentMonthMap[playerName][games]) { 
                //numberOfGamesInMonth++;
                playerCumulativeGames += 1;//numberOfGamesInMonth;
                cumulativeGames[officialPlayerName] = playerCumulativeGames;
              }
            if (playerName == "Dean") {
              console.log("QQQ PLAYED", officialPlayerName, playerCumulativeGames)
            }

              data.push([playerCumulativeGames, Math.random(), Math.random(), playerName, " " + monthShortDateFormat.format(date) + "-" + year + " Week:" + games]);
            //}
          } else {
            //var gamesInMonthMap = currentMonthMap[Object.keys(currentMonthMap)[0]];
            //Object.keys(gamesInMonthMap).sort().forEach(function(games) {
            data.push([playerCumulativeGames, Math.random(), Math.random(), playerName, " " + monthShortDateFormat.format(date) + "-" + year + " Week:" + games]);
            if (playerName == "Dean") {
              console.log("QQQ NOT PLAYED", officialPlayerName, playerCumulativeGames)
            }
          }

        }) //players

            }//week
      }) //month
    }) //week

    var alltimegamesElement = document.getElementById('alltimegames');
    //alltimegamesElement.innerHTML = alltimegamesElement.innerHTML + Object.keys(cumulativeGames).length;

    const years = [];
    for (let i = 0; i < data.length; ++i) {
      if (years.length === 0 || years[years.length - 1] !== data[i][4]) {
        years.push(data[i][4]);
      }
    }
    let startIndex = -1;
    let startYear = years[startIndex];
    option = {
      grid: {
        top: 50,
        bottom: 10,
        left: 100,
        right: 50
      },
      xAxis: {
        max: 'dataMax',
        axisLabel: {
          formatter: function (n) {
            return Math.round(n) + '';
          }
        }
      },
      dataset: {
        source: data.slice(1).filter(function (d) {
          return d[4] === startYear;
        })
      },
      yAxis: {
        type: 'category',
        inverse: true,
        max: 30,
        axisLabel: {
          show: true,
          fontSize: 14,
          formatter: function (value) {
            return value;
          },
          rich: {
            flag: {
              fontSize: 25,
              padding: 5
            }
          }
        },
        animationDuration: 300,
        animationDurationUpdate: 300
      },
      series: [
        {
          realtimeSort: true,
          seriesLayoutBy: 'column',
          type: 'bar',
          itemStyle: {
            color: function (param) {
              return playerColors[param.value[3]] || 'lightblue';
            }
          },
          encode: {
            x: dimension,
            y: 3
          },
          label: {
            show: true,
            precision: 0,
            position: 'right',
            valueAnimation: true,
            fontFamily: 'monospace'
          }
        }
      ],
      // Disable init animation.
      animationDuration: 0,
      animationDurationUpdate: updateFrequency,
      animationEasing: 'linear',
      animationEasingUpdate: 'linear',
      graphic: {
        elements: [
          {
            type: 'text',
            right: 100,
            top: 20,
            style: {
              text: startYear,
              font: 'bolder 20px monospace',
              fill: 'rgba(100, 100, 100, 0.25)'
            },
            z: 100
          }
        ]
      }
    };
    // console.log(option);
    myChart.setOption(option);
    for (let i = startIndex; i < years.length - 1; ++i) {
      (function (i) {
        setTimeout(function () {
          updateYear(years[i + 1]);
        }, (i - startIndex) * updateFrequency);
      })(i);
    }
    function updateYear(year) {
      let source = data.slice(1).filter(function (d) {
        return d[4] === year;
      });
      option.series[0].data = source;
      option.graphic.elements[0].style.text = year;
      myChart.setOption(option);
    }

    function mondaysInMonth(m,y) {
      var days = new Date(y,m,0).getDate();
      var mondays =  new Date(m +'/01/'+ y).getDay();
      if (mondays != 1){
        mondays = 9 - mondays;
      }
      mondays = [mondays];
      //console.log(mondays);
      for (var i = mondays[0] + 7; i <= days; i += 7) {
        mondays.push(i);
      }
      return mondays;
    }

    // get the official name from a map of aliases (using case insensitive search)
    function getOfficialNameFromAlias(nameToCheck, aliasToPlayerMap) {
      nameToCheck = nameToCheck.trim();
      var officialName = undefined;
      var fullAliasList = Object.keys(aliasToPlayerMap);
      for (var i = 0; i < fullAliasList.length; i++) { 
        if (nameToCheck.toUpperCase() == fullAliasList[i].toUpperCase()) {
          officialName = aliasToPlayerMap[nameToCheck.toUpperCase()]
        }
      }
      if (!officialName) {
        console.log("WARNING: Failed to find official name for:", nameToCheck);
      }
      return officialName;
    }

    </script>
  </div>
</body>
</html>
