<!DOCTYPE html>
<html lang="en">
<head>
  <%- include ("../partials/header.ejs") %>

  <style>
  .borderdiv {
    background-color: #D5EDF6;
    color: #333333;
    padding: 2px 6px 2px 6px;
    border-top: 1px solid #D5EDF6;
    border-right: 1px solid #333333;
    border-bottom: 1px solid #333333;
    border-left: 1px solid #D5EDF6;
  }
  pre {
    padding: 0px;
    margin: 0px;
  }

  .collapse {
      border: none;
      outline: none;
  }
  .active,
  .collapse:hover {
    background-color: #438a5e;
  }
  .paymentsListText {
    background-color: #efe;
    display: none;
  }

  </style>
</head>

<body class="w3-light-grey">
  <%- include ("../partials/nav.ejs") %>
  <!-- Page content -->
  <div class="w3-content" style="max-width:2000px;margin-top:46px;margin-left: 10px;">

  <div id="blank" style="height: 40px"></div>
  <h3>Payments Ledger</h3>
  <div id="paymentsSummaryDiv">
    <label id="pitchCostSummary" hidden></h3>
    <!-- Stuff here -->
  </div>

  <div id="mailList">
    <p>Add a manual payment...

    <div style="width:100%;display:flex;">
      <div id="formEntryDiv1" style="display:inline;width:30%">
        <!-- Radio buttons -->
        <input id="paymentChoice" type="radio" name="transactionType" value="payment" checked/>
        <label for="paymentChoice">Payment</label>
        <input id="chargeChoice" type="radio" name="transactionType" value="charge"/>
        <label for="chargeChoice">Charge</label>
        <!-- Fields -->
        <br><input type="text" id="payeeName" placeholder="Payees Name" data-lpignore=true>
        <br><input type="text" id="payeeAmount" placeholder="Amount" data-lpignore=true>
        <br><input type="text" id="payeeTransactionId" placeholder="Transaction ID" data-lpignore=true>
        <br><input type="text" id="payeeTransactionDate" placeholder="Transaction Date (YYYY-MM-DD)" data-lpignore=true>
        <!-- Buttons -->
        <br><button id="submit" style="background-color: #90EE90;float:left;" type="button" onclick="addManualPayment();">Add</button>
        <button id="submit" style="background-color: #90EE90;float:left;" type="button" onclick="refundPayment();">Refund</button>
        <button id="submit" style="background-color: #90EE90;float:left;" type="button" onclick="splitPayment();">Split</button>
        <div id="response"></div>
      </div>
    <div style="width:100%;display:flex;">
      <div id="emailEntryDiv" style="display:inline;width:55%">
        <select id="paymentsSelect" onchange="updateEmailText(this.value)" >
        <option> ---Select Failed Email--- </option>  
        </select>
        <button id="addAdminCost" style="background-color: #90EE90;" type="button" onclick="addAdminCost();">Add Admin Cost</button><br>
        <button id="parseEmail" style="background-color: #90EE90;" type="button" onclick="parseEmail();">Parse Email</button><br>
        <button id="deleteEmail" style="background-color: #90EE90;" type="button" onclick="deleteEmail();">Delete</button><br>
        <p id="htmlEmail" rows="30" style="width:95%;font-size: 100%;margin-top:10px" >Not Yet Available</textarea>
      </div>
      <div id="paymentsEntryDiv" style="display:inline;width:44%;font-size: 100%;"></div><p>
    </div> 
    </div> 
    <p>

    <br>
  </div> 
  <textarea id="emailBody" rows="30" style="width:95%;font-size: 100%;margin-top:10px" >Not Yet Available</textarea>

  <script type="text/javascript">
  /** TODO
  * Ability to delete an email from the dead-letter-queue
  * Display summary of transactions of all users (inc money in/money out)
  * Ability to cross-charge from one player to another (so someone can pay for someone else)
  */
    var EMAIL_DOC_PREFIX = "PAYMENT_";
    //var EMAIL_DOC_PREFIX = "PAYMENT_PITCH_EMAIL_";
    //var EMAIL_DOC_PREFIX = "PAYMENT_PAYPAL_EMAIL_";
    //var EMAIL_DOC_PREFIX = "PAYMENT_ERROR_EMAIL_";

    // restringify and then parse the json to get the page
    let pagedata = JSON.parse(JSON.stringify(<%- pageData %>));
    console.log(pagedata, pagedata.data.outstandingPayments);

    var inboundEmails = pagedata.data.inboundEmails;
    if (!inboundEmails) { inboundEmails = {}; }
    var outstandingPayments = pagedata.data.outstandingPayments;
    if (!outstandingPayments) { outstandingPayments = {}; }
    var closedLedgers = pagedata.data.closedLedgers;
    if (!closedLedgers) { closedLedgers = {}; }
    var openLedgers = pagedata.data.openLedgers;
    if (!openLedgers) { openLedgers = {}; }
    var allCollectionDocs = pagedata.data.allCollectionDocs;
    if (!allCollectionDocs) { allCollectionDocs = {}; }
    document.getElementById("payeeTransactionDate").value = new Date().toISOString().split('T')[0];

    // collate the aliases
    var playerAliasMaps = pagedata.data.playerAliasMaps;
    var playerToAliasMap = playerAliasMaps["playerToAliasMap"];
    var aliasToPlayerMap = playerAliasMaps["aliasToPlayerMap"];
    playerNameSuggestions = Array.from(Object.keys(playerToAliasMap));

    // change the header red if using a test environment
    if (pagedata.environment != "PRODUCTION") {
      console.log("Environment:", pagedata.environment);
      // local test env so show header as red
      var navTopElement = document.getElementById("navTop")
      navTopElement.className = navTopElement.className.replace(" w3-black", " w3-red");
      var navDemo = document.getElementById("navTop")
      navDemo.className = navDemo.className.replace(" w3-black", " w3-red");
    }

    Object.keys(inboundEmails).reverse().forEach(function(key) {
      //console.log("Found emails...", inboundEmails);
      if (key.startsWith(EMAIL_DOC_PREFIX)) {
        var x = document.getElementById("paymentsSelect");
        var option = document.createElement("option");
        option.id = key;
        option.text = key.replace(EMAIL_DOC_PREFIX, "");
        option.value = key.replace(EMAIL_DOC_PREFIX, "");
        x.add(option);

        if (inboundEmails[key].type == "PAYMENT_PITCH_EMAIL") {
          //var playerTransactionName = "charge_pitch_" + thisDate + "_" + transactionId;
          updateEmailText(option.text);
          var parsedData = parsePitchEmail(document.getElementById('htmlEmail').innerText);
          var dateTime = key.replace(EMAIL_DOC_PREFIX, "").replace(/T(\d\d:\d\d).*/, " $1");
          var pitchChargeAlreadyRegistered = false;
          for (const paymentId in closedLedgers["Admin"], parsedData[0]) {
            console.log("pPPPPp", closedLedgers["Admin"][paymentId])
            if (paymentId.startsWith("charge_pitch_") && closedLedgers["Admin"][paymentId].transactionId == parsedData[0].transactionId) {
              pitchChargeAlreadyRegistered = true;
            }
          }
          if (!pitchChargeAlreadyRegistered) {
            option.text += " (NEW)";
          }
        } else { //if (inboundEmails[key].type == "PAYMENT_PAYPAL_EMAIL") {
          // identify NEW emails - parse the email and check if the payment is already added
          updateEmailText(option.text);
          var parsedData = parsePaypalEmail(document.getElementById('htmlEmail').innerText);
          if (parsedData.payeeName) {
            var dateTime = key.replace(EMAIL_DOC_PREFIX, "").replace(/T(\d\d:\d\d).*/, " $1");
            option.text = dateTime + " " + parsedData.payeeName.padEnd(20) + " Â£" + parsedData.amount;

            var officialPlayerName = getOfficialNameFromAlias(parsedData.payeeName, aliasToPlayerMap);
            var playerName = (officialPlayerName) ? officialPlayerName : parsedData.payeeName;
            var paymentAlreadyRegistered = false;
            for (const paymentId in closedLedgers[playerName]) {
              if (paymentId.startsWith("payment_") && paymentId.includes(parsedData.transactionId)) {
                paymentAlreadyRegistered = true;
              }
            }
            if (!paymentAlreadyRegistered) {
              option.text += " (NEW)";
            }
          }
          //console.log(playerName, parsedData, paymentAlreadyRegistered);
        }
      }
    });
    // clear the htmlEmail element
    document.getElementById('htmlEmail').innerHTML = "";

    // loop through all of the costs and payments for this year
    var totalGamesPlayed = 0;
    var gamesPlayedDates = [];
    var totalGamesMissed = 0;
    for (const collectionId in allCollectionDocs) {
      //console.log(collectionId);
      var currentAttendance = allCollectionDocs[collectionId];
      // loop through all docs
      for (const docId in allCollectionDocs[collectionId]) {
        var docName = allCollectionDocs[collectionId][docId].id;
        /*
        if (docName.startsWith("Phil R")) {
          console.log("  ++", collectionId, docName);
        }
        */
        if (docName == "_attendance") {
          var docData = allCollectionDocs[collectionId][docId].data;
          for (var weekNumber = 0; weekNumber <= 5; weekNumber ++) {
            var playerList = docData[weekNumber];
            if (playerList && playerList.scores) {
              if (playerList.scores.team1goals > -1) {
                totalGamesPlayed++;
                gamesPlayedDates.push(collectionId + " " + weekNumber);
                var exactDate = getExactDateFromMonthAndIndex(collectionId.replace("games_", ""), weekNumber);
                //console.log(collectionId, weekNumber, exactDate);
                document.getElementById("pitchCostSummary").innerHTML += exactDate.toISOString().split('T')[0] + "<br>";
              } else {
                totalGamesMissed++;
              }
              //console.log("--", collectionId, weekNumber, playerList.scores);
            }
          }
        }
      }
    }
    //////////////////////
    /////// TODO: FIX THIS
    //////////////////////
    var overallTotalGamesCost = (totalGamesPlayed+totalGamesMissed)*-37;
    document.getElementById("paymentsSummaryDiv").innerHTML += "<pre>PITCH-COST\t  #GAMES\t  MISSED\t   TOTAL</pre>";

    //// TODO - Calc pitch-costs in ADMIN and update the overallTotalGamesCost calculation
    // total games costs = CLOSED_LEDGER/Admin/charge_pitch_2024_xx_xx (exact monday date)
    // total games played = CLOSED_LEDGER/<player name>/charge_2024_xx_xx (loop through all players, exact Monday date)
    // total games missed-but-charged = costs - played
    // total games missed-and-cancelled = availability-loop - played - missed
    //console.log("-DONE-", totalGamesPlayed, totalGamesMissed, overallTotalGamesCost);
      document.getElementById("paymentsSummaryDiv").innerHTML += "<div id='toggleTotalGamesList' class='expandable' onclick='toggleVisbility(this);''><pre>  Â£-37" + "\t" 
                                                        + String(totalGamesPlayed).padStart(8, ' ') + "\t" 
                                                        + String(totalGamesMissed).padStart(8, ' ') + "\t" 
                                                        + String(String("Â£" + overallTotalGamesCost).padStart(8, ' ')) + "</pre></div>"


      function toggleVisbility(e) {
        console.log("Clicked...", e);
        var elementIds = [];
        if (e.id == "toggleTotalGamesList") {
          elementIds = ["pitchCostSummary"];
        } else if (e.id == "toggleAlgorithm") {
          elementIds = ["algorithmChoice", "algorithmChoiceRange"];
        } else {
          // unknown element so return
          return;
        }

        // now perform the toggle
        if (e.className == "expandable") {
          for(i = 0; i < elementIds.length; i++) {
            document.getElementById(elementIds[i]).hidden = false;
          }
          e.className = "contractable";
        } else {
          for(i = 0; i < elementIds.length; i++) {
            document.getElementById(elementIds[i]).hidden = true;
          }
          e.className = "expandable";
        }
      }



    // loop through all the players
    document.getElementById("paymentsEntryDiv").innerHTML += "<pre>PLAYER          PAID     COST   BALANCE</pre>";
    var overallTotalPayments = 0;
    var overallTotalCost = 0;
    var totalPlayerGamesPaid = 0;
    var totalPlayerGamesOwed = 0;
    let cloneClosedLedgers = Object.assign({}, closedLedgers)
    // add in the unpaid players in openLedger if they don't already exist
    for (var unpaidPlayerName in openLedgers) {
      if (!cloneClosedLedgers[unpaidPlayerName]) {
        cloneClosedLedgers[unpaidPlayerName] = {};
      }
    }
    Object.keys(cloneClosedLedgers).sort().forEach(function(key) {
      var playerAccounts = "";
      //console.log("Got payments ledger...", cloneClosedLedgers);
      playerAccounts += "<div id='" + key.replace("'", "") + "PaymentDiv' class='collapse'>" + key + "...</div>";
      playerAccounts += "  <div class='paymentsListText'>";
      var payments = cloneClosedLedgers[key];
      var totalPayments = 0;
      var totalCost = 0;
      var paymentError = false;
      var chargeError = false;
      var hasOutstandingPayments = false;

      // loop through all the payments for the players
      Object.keys(payments).sort().forEach(function(paymentsKey) {
        if (paymentsKey.startsWith("payment_")) {
          var paymentDate = paymentsKey.split("_")[1];
          var transactionId = payments[paymentsKey].paypalTransactionId;
          var paymentAmount = Number(payments[paymentsKey].amount);
          totalPayments += Number(paymentAmount);
          var preIdData = "PAYMENT+++" + key + "+++" + transactionId + "+++" + paymentAmount + "+++" + paymentDate;
          playerAccounts += "<pre onclick='updateTextFields(this.id);' id='" + preIdData + "'>   " + paymentDate + " " + transactionId + " " + paymentAmount + "</pre>";
          payments[paymentsKey].accountedFor = true;

          // loop through all the games for the player and match the payment
          var amountLeft = paymentAmount;
          Object.keys(payments).sort().forEach(function(paymentsKey) {
            if (paymentsKey.startsWith("charge_") && payments[paymentsKey].paid == transactionId) {
              var chargeAmount = payments[paymentsKey].amount;
              var chargeWeek = paymentsKey.replace(/charge_/, '');
              var paymentFor = (payments[paymentsKey].paymentFor) ? " (" + payments[paymentsKey].paymentFor + ")" : "";
              var additionalInfo = (payments[paymentsKey].additionalInfo) ? " (" + payments[paymentsKey].additionalInfo + ")" : "";
              var preIdData = "CHARGE+++" + key + "+++" + transactionId + "+++" + chargeAmount + "+++" + chargeWeek;
              playerAccounts += "<pre onclick='updateTextFields(this.id);' id='" + preIdData + "'>      " + chargeWeek + " " + chargeAmount + paymentFor + additionalInfo + "</pre>";
              totalCost += chargeAmount;
              amountLeft += chargeAmount;
              payments[paymentsKey].accountedFor = true;
              totalPlayerGamesPaid++;
            }
          });

          if (amountLeft != 0) {
            console.log("AMOUNT_LEFT", key, amountLeft)
            paymentError = true;
            playerAccounts += "^^^"
          }
        }
      });


      // loop through all the unpaid games for the player
      var charges = openLedgers[key];
      if (charges) {
        playerAccounts += "<pre>   (Unpaid)</pre>";
        Object.keys(charges).sort().forEach(function(chargesKey) {
          var chargeAmount = charges[chargesKey].amount;
          var chargeWeek = chargesKey;
          var transactionId = "";
          var preIdData = "CHARGE+++" + key + "+++" + transactionId + "+++" + chargeAmount + "+++" + chargeWeek;
          playerAccounts += "<pre onclick='updateTextFields(this.id);' id='" + preIdData + "'>      (Â£ " + chargeWeek + " " + chargeAmount + ")</pre>";
          
          hasOutstandingPayments = true;
          totalCost += chargeAmount;
          totalPlayerGamesOwed++;
          //console.log("-------", key)
        });
      }

      // loop through all the games for the player and match the payment
      Object.keys(payments).sort().forEach(function(unfoundKey) {
        //console.log("CHARGE",unfoundKey, key);
        if (payments[unfoundKey] && payments[unfoundKey].accountedFor != true) {
          var chargeAmount = payments[unfoundKey].amount;
          var chargeWeek = unfoundKey;
          var paidDetails = payments[unfoundKey].paid;
          if (paidDetails && paidDetails.split("___").length == 2) {
            // charge must have been paid by someone else
            var payeeName = paidDetails.split("___")[0];
            var payeeTransactionId = paidDetails.split("___")[1];
            playerAccounts += "<pre>  Paid by: " + payeeName + " (" + payeeTransactionId + ")</pre>";
            playerAccounts += "<pre>      " + chargeWeek + " " + chargeAmount + " (" + payeeName + ")</pre>";
          } else {
            // charge unaccounted for
            chargeError = true;
            playerAccounts += "<pre>******" + chargeWeek + " " + chargeAmount + "</pre>";
            totalCost += chargeAmount;
          }
          //console.log("CHARGE",unfoundKey, key, paidDetails.split("___").length)
        }
      });

      playerAccounts += key + " " + totalPayments + " " + totalCost + "\n\n</pre></div>";
      document.getElementById("paymentsEntryDiv").innerHTML += playerAccounts;

      var rowStyle = "background-color:white; color:black";
      if (key != "Admin") {
        if (paymentError && chargeError) {
          rowStyle = "background-color:blue; color:white";
        } else if (paymentError && hasOutstandingPayments) {
          rowStyle = "background-color:orange; color:white";
        } else if (paymentError) {
          rowStyle = "background-color:red; color:white";
        } else if (chargeError) {
          rowStyle = "background-color:yellow; color:black";
        }
      }

      var totalDifference = totalPayments + totalCost;
      //console.log("PPP", key.replace(/'/g, ""), chargeError);
      document.getElementById(key.replace(/'/g, "") + "PaymentDiv").innerHTML = "<pre style='" + rowStyle + "'> &#12297; " + key.padEnd(12, '.') + String("Â£" + totalPayments).padStart(4, ' ') + "  | " + String("Â£" + totalCost).padStart(5, ' ') + "  | " + String("Â£" + totalDifference).padStart(4, ' ');

      overallTotalPayments += totalPayments;
      overallTotalCost += totalCost;
    });

    document.getElementById("paymentsSummaryDiv").innerHTML += "<pre>PER-PLAYER\t#PLAYERGAMES\t\t\t   TOTAL</pre>";
    document.getElementById("paymentsSummaryDiv").innerHTML += "<pre>        Â£4" + "\t" 
                                                        + String(totalPlayerGamesPaid).padStart(8, ' ') + "\t\t\t" 
                                                        + String("Â£" + overallTotalPayments).padStart(8, ' ') + "</pre>";
    // calculate kitty
    var adminCharge = 0;
    Object.keys(cloneClosedLedgers["Admin"]).forEach(function(transactionKey) {
      var transaction = cloneClosedLedgers["Admin"][transactionKey];
      if (transactionKey.startsWith("charge_")) {
        adminCharge += transaction.amount;
      }
    });
    var kitty = overallTotalPayments + overallTotalGamesCost + adminCharge;
    // 
    document.getElementById("paymentsSummaryDiv").innerHTML += "<pre>(UNPAID: " + totalPlayerGamesOwed + " payments = Â£" + totalPlayerGamesOwed*4 + ")</pre>"
    document.getElementById("paymentsSummaryDiv").innerHTML += "<pre>\t\t\t\t(ADMIN COSTS)\t   KITTY</pre>";
    document.getElementById("paymentsSummaryDiv").innerHTML += "<pre>\t\t\t\t" + String(adminCharge.toFixed(2)).padStart(8, ' ') + "\t" + String("Â£" + kitty.toFixed(2)).padStart(8, ' ') + "</pre>";
    //console.log("-OVERALLS-", overallTotalPayments, overallTotalCost, kitty);

    function updateEmailText(text) {
      var emailBody = inboundEmails[EMAIL_DOC_PREFIX + text].data;
      document.getElementById("emailBody").value = emailBody;

      var htmlCode = "";
      if (inboundEmails[EMAIL_DOC_PREFIX + text].type == "PAYMENT_PITCH_EMAIL") {
        htmlCode = emailBody.substring(emailBody.indexOf("Date:"), emailBody.indexOf("Go!"));
        var parsedData = parsePitchEmail(htmlCode);
        //console.log("Pitch parsedData", parsedData);
        // display text summary
        htmlCode = "<pre>" + emailBody.substring(emailBody.indexOf("Thank"), emailBody.indexOf("Please")) + "</pre>";
      } else {
        var startOfHTML = emailBody.indexOf("<html");
        var firstTable = emailBody.indexOf("<table cell", startOfHTML + 1);
        var secondTable = emailBody.indexOf("<table cell", firstTable + 1);
        var thirdTable = emailBody.indexOf("<table cell", secondTable + 1);
        var fourthTable = emailBody.indexOf("<table cell", thirdTable + 1);
        var interestingData = emailBody.substring(thirdTable);
        //console.log(startOfHTML, firstTable, secondTable, thirdTable)
        htmlCode = emailBody.substring(emailBody.indexOf("<table"), emailBody.indexOf("Can't see the money"));
      }
      document.getElementById('htmlEmail').innerHTML = htmlCode;
      document.getElementById('response').innerHTML = "";
    }

    function updateTextFields(data) {
      //console.log("Updating fields", data);
      var transactionType = data.split("+++")[0];
      var playerName = data.split("+++")[1];
      var transactionId = data.split("+++")[2];
      var amount = data.split("+++")[3];
      var transactionDate = data.split("+++")[4];
      document.getElementById("payeeName").value = playerName;
      document.getElementById("payeeAmount").value = amount;
      document.getElementById("payeeTransactionId").value = transactionId;
      document.getElementById("payeeTransactionDate").value = transactionDate;

      var subscribeType = document.getElementsByName("transactionType")[0];
      if (transactionType == "PAYMENT") {
        document.getElementsByName("transactionType")[0].checked = true;
      } else {
        document.getElementsByName("transactionType")[1].checked = true;
      }
    }
    
    function addManualPayment() {
      var details = {};
      details.action = "ADD";
      details.transactionType = document.querySelector('input[name="transactionType"]:checked').value;
      details.payeeName = document.getElementById("payeeName").value.trim();
      details.amount = document.getElementById("payeeAmount").value.trim();
      details.transactionId = document.getElementById("payeeTransactionId").value.trim();
      details.transactionDate = document.getElementById("payeeTransactionDate").value.trim();

      // now send the POST request with the data
      var xmlhttp = new XMLHttpRequest();
      xmlhttp.onreadystatechange = function() {
        if (this.readyState == 4 && this.status == 200) {
          console.log("Saved response", this.responseText);
          //location.reload(true);
          document.getElementById("response").innerHTML = "Success!";
          //document.getElementById("submit").disabled = true;
        } else if (this.readyState == 4) {
          document.getElementById("response").innerHTML = "Error!  Something went wrong - check logs to see why it failed";
        }
      };
      xmlhttp.open("POST", "/services/payment-manual");
      xmlhttp.setRequestHeader("Content-Type", "application/json");
      xmlhttp.send(JSON.stringify(details));
    }

    function addAdminCost() {
      var text = document.getElementById("paymentsSelect").value;
      var emailBody = inboundEmails[EMAIL_DOC_PREFIX + text].data;
      document.getElementById("emailBody").value = emailBody;

      //if (inboundEmails[EMAIL_DOC_PREFIX + text].type == "PAYMENT_PITCH_EMAIL") {
      var htmlCode = emailBody.substring(emailBody.indexOf("Payment Date"), emailBody.indexOf("Please make a note"));
      var parsedData = parsePitchEmail(htmlCode);
      console.log("Adding admin cost parsedData", parsedData);
        
      //var details = {};
      var details = parsedData;
      details.action = "ADD";
      details.amount = details.amount;
      details.transactionType = "Charge"; //document.querySelector('input[name="transactionType"]:checked').value;

      // now send the POST request with the data
      var xmlhttp = new XMLHttpRequest();
      xmlhttp.onreadystatechange = function() {
        if (this.readyState == 4 && this.status == 200) {
          console.log("Saved response", this.responseText);
          //location.reload(true);
          document.getElementById("response").innerHTML = "Success!";
          //document.getElementById("submit").disabled = true;
        } else if (this.readyState == 4) {
          document.getElementById("response").innerHTML = "Error!  Something went wrong - check logs to see why it failed";
        }
      };
      xmlhttp.open("POST", "/services/payment-admin-cost");
      xmlhttp.setRequestHeader("Content-Type", "application/json");
      xmlhttp.send(JSON.stringify(details));
    }

    function refundPayment() {
      var details = {};
      details.action = "REFUND";
      details.transactionType = document.querySelector('input[name="transactionType"]:checked').value;
      //details.payeeName = document.getElementById("payeeName").value.trim();
      //details.amount = document.getElementById("payeeAmount").value.trim();
      details.transactionId = document.getElementById("payeeTransactionId").value.trim();
      //details.transactionDate = document.getElementById("payeeTransactionDate").value.trim();

      // now send the POST request with the data
      var xmlhttp = new XMLHttpRequest();
      xmlhttp.onreadystatechange = function() {
        if (this.readyState == 4 && this.status == 200) {
          console.log("Saved response", this.responseText);
          //location.reload(true);
          document.getElementById("response").innerHTML = "Success!";
          document.getElementById("submit").disabled = true;
        } else if (this.readyState == 4) {
          document.getElementById("response").innerHTML = "Error!  Something went wrong - check logs to see why it failed";
        }
      };
      xmlhttp.open("POST", "/services/payment-manual");
      xmlhttp.setRequestHeader("Content-Type", "application/json");
      xmlhttp.send(JSON.stringify(details));
    }

    function splitPayment() {
      var details = {};
      details.action = "SPLIT";
      details.transactionType = document.querySelector('input[name="transactionType"]:checked').value;
      details.payeeName = document.getElementById("payeeName").value.trim();
      details.amount = document.getElementById("payeeAmount").value.trim();
      details.transactionId = document.getElementById("payeeTransactionId").value.trim();
      details.transactionDate = document.getElementById("payeeTransactionDate").value.trim();
      // TODO - decide whether to store cross-charge as "payeeName___transactionId"
      //var details.transactionId = details.payeeName + "___" + details.transactionId;

      // now send the POST request with the data
      var xmlhttp = new XMLHttpRequest();
      xmlhttp.onreadystatechange = function() {
        if (this.readyState == 4 && this.status == 200) {
          console.log("Saved response", this.responseText);
          //location.reload(true);
          document.getElementById("response").innerHTML = "Success!";
          document.getElementById("submit").disabled = true;
        } else if (this.readyState == 4) {
          document.getElementById("response").innerHTML = "Error!  Something went wrong - check logs to see why it failed";
        }
      };
      xmlhttp.open("POST", "/services/payment-manual");
      xmlhttp.setRequestHeader("Content-Type", "application/json");
      xmlhttp.send(JSON.stringify(details));
    }

    <%- include ("./generate-teams-utils.js") %>
    function parseEmail() {
      var key = EMAIL_DOC_PREFIX + document.getElementById("paymentsSelect").value;
      //var body = inboundEmails[key].data;

      // get the text only version of the details 
      var bodyTextOnly = document.getElementById("htmlEmail").innerText;
      //Amount received Â£20.00Â GBP
      console.log("cC", bodyTextOnly)
      var parsedData = parsePaypalEmail(bodyTextOnly);
      document.getElementById("payeeName").value = parsedData.payeeName;
      document.getElementById("payeeAmount").value = parsedData.amount;
      document.getElementById("payeeTransactionId").value = parsedData.transactionId;
      document.getElementById("payeeTransactionDate").value = parsedData.transactionDate;
    }
    

    function deleteEmail() {
      var selectElement = document.getElementById("paymentsSelect");
      if (!confirm('This will permanently delete the email from' + selectElement.value + '.\nAre you sure?')) return;

      var details = {};
      details.key = EMAIL_DOC_PREFIX + selectElement.value;
      details.type = "INBOUND_EMAIL";
      details.action = "DELETE";

      // now send the POST request with the data
      var xmlhttp = new XMLHttpRequest();
      xmlhttp.onreadystatechange = function() {
        if (this.readyState == 4 && this.status == 200) {
          console.log("Saved response", this.responseText);
          //location.reload(true);
          document.getElementById("response").innerHTML = "Success!";
          document.getElementById("submit").disabled = true;
          // now remove the element from the dropdown
          selectElement.remove(selectElement.selectedIndex);
        } else if (this.readyState == 4) {
          document.getElementById("response").innerHTML = "Error!  Something went wrong.";
        }
      };
      xmlhttp.open("POST", "/services/payment-email-admin");
      xmlhttp.setRequestHeader("Content-Type", "application/json");
      xmlhttp.send(JSON.stringify(details));
    }
  </script>

  <script>
    var btn = document.getElementsByClassName("collapse");

    for (i=0; i<btn.length; i++) {
      btn[i].addEventListener("click", function () {
        this.classList.toggle("active");
        var content = this.nextElementSibling;
        if (content.style.display === "block") {
          content.style.display = "none";
        } else {
          content.style.display = "block";
        }
     });
  }
  </script>
  </div>
</body>
</html>
