<!DOCTYPE html>
<html lang="en">
<head>
  <%- include ("../partials/header.ejs") %>
      <script src="/autocomplete.js"></script>
</head>

<body class="w3-light-grey">
  <%- include ("../partials/nav.ejs") %>
  <!-- Page content -->
  <div class="w3-content" style="max-width:2000px;margin-top:46px;margin-left: 10px;">
    <div class="borderdiv">
      <br>
      <div id="teamTitle"><H3>Teams not yet generated - please try later</H3></div>

      <div id="chooseOptionAlgorithm" style="display:inline;margin-left:30px;">
        Compare by ratio:
        <select name="algorithmChoice" id="algorithmChoice" checked onchange="changeAlgorithm(this.value)">
          <option value="algorithm3">Avg Score Per Game</option>
          <option value="algorithm2">Win+Draw Ratio</option>
          <option value="algorithm1">Win Ratio</option>
          <option value="algorithm4">Total Score Per Game</option>
          <option value="algorithm5">Most Played</option>
        </select>
      </div>

      <div id="chooseOptionAlgorithm" style="display:inline;margin-left:30px;">
        # of months:
        <select name="algorithmChoice" id="algorithmChoice" checked onchange="changeAlgorithmRange(this.value)">
          <option value="12">12 Months</option>
          <option value="6">6 Months</option>
          <option value="3">3 Months</option>
          <option value="1">1 Months</option>
          <option value="999999999">All-Time (Since Jan 2023)</option>
        </select>
      </div>

      <div id="description"></div>
        <div class="panelcontentouter">
        <div class="panelcontentinnerleft" style="width: 32%">
          <label for="redPlayerSelect" style="width: 100%">Reds:</label>
          <select id="redPlayerSelect" multiple onchange="updatePlayerChoice(this)" size="16" style="width: 100%" >
          </select>
        </div>
        <div class="panelcontentinnerright" style="width: 32%">
          <label for="bluePlayerSelect" style="width: 100%">Blues:</label>
          <select id="bluePlayerSelect" multiple onchange="updatePlayerChoice(this)" size="16" style="width: 100%" >
          </select>
        </div>
        <div class="panelcontentinnerright" style="width: 32%">
          <label for="standbyPlayerSelect" style="width: 100%">Standby:</label>
          <select id="standbyPlayerSelect" multiple onchange="updatePlayerChoice(this)" size="16" style="width: 100%" >
          </select>
        </div>
        <div style="clear:both;"></div>
      </div>

      <div style="clear:both;"></div>Add Player:
      <div class="autocomplete"><input type="text" id="newPlayerInput"></input></div>
      <button id="submitAddPlayer" style="background-color: #90EE90;" type="button" onclick="saveAddPlayer();">Add</button>
      <div style="clear:both;"></div>
      <button id="submit" style="background-color: #90EE90;float:left;" type="button" onclick="savePreviewTeams();">Save</button>
      <div id="response"></div>

      <br><p>
      <div class="panelcontentouter">
        <div class="panelcontentinnerleft" style="width: 20%">
          <div id="teamListRatiosDiv"><textarea id="teamListRatios" style="overflow:hidden; background-color: transparent; border:0; padding-right: 10px; text-align: right; color: #666; width: 100%;" readonly></textarea></div>
        </div>
        <div class="panelcontentinnerleft" style="width: 30%">
          <div id="teamListDiv"><textarea id="teamList" style="overflow:hidden; background-color: transparent; border:0; width: 100%;" readonly></textarea></div>
        </div>
        <div class="panelcontentinnerright" style="width: 50%">
          <div id="invalidListDiv" style="color:red"><textarea id="invalidList" style="overflow:hidden; background-color: transparent; border:0; width: 100%; color:red" readonly></textarea></div>
        </div>
        <div style="clear:both;"></div>
      </div>

      <!--
      <div id="forceStandby">
        <label for="forceStandbyPlayerSelect" style="width: 100%">Force Standby List:</label>
        <select id="forceStandbyPlayerSelect" multiple onchange="updateStandbyChoice(this)" size="18" style="width: 100%" >
        </select>
      </div>
      <div id="forceStandbyDescription"></div>
      -->

    </div>
  </div>
    
    <script type="text/javascript">
      <%- include ("./generate-teams-utils.js") %>

      var monthDateNumericFormat = new Intl.DateTimeFormat('en', { month: '2-digit' });

      var gameWeek = "NOT YET SET";
      var allPlayers = [];
      var currentState = {};
      var originalState = {};
      originalState.redPlayers = [];
      originalState.bluePlayers = [];
      originalState.standbyPlayers = [];
      originalState.gameWeek = gameWeek;

      // restringify and then parse the json to get the page
      var pagedata = JSON.parse(JSON.stringify(<%- pageData %>));
      console.log(pagedata);

      var playerAliasMaps = pagedata.players.playerAliasMaps;
      var playerToAliasMap = playerAliasMaps["playerToAliasMap"];
      var aliasToPlayerMap = playerAliasMaps["aliasToPlayerMap"];
      var playerNameSuggestions = Array.from(Object.keys(playerToAliasMap));

      var allAttendanceData = pagedata.allAttendanceData;
      if (!allAttendanceData) { allAttendanceData = {}; }

      // change the algorithm for all players and regenerate teams
      var algorithmType = "algorithm3"; //default
      var algorithmRange = 12; //default
      document.getElementById("algorithmChoice").value = algorithmType;
      var nextMondayOptionIndex = 2;
      // need to clone these (which means it must be destructive - maybe fix?)
      let clonePlayers = { ...pagedata.players }
      let clonePlayersPreviewData = { ...pagedata.playersPreviewData }
      var playersGamesPlayedRatio = changeAlgorithmForPlayers(algorithmType, clonePlayers, clonePlayersPreviewData, allAttendanceData, aliasToPlayerMap, nextMondayOptionIndex, algorithmRange);
      //console.log("playersGamesPlayedRatio", playersGamesPlayedRatio)

      var redPlayers = pagedata.playersPreviewData["redPlayers"];
      var bluePlayers = pagedata.playersPreviewData["bluePlayers"];
      var standbyPlayers = pagedata.playersPreviewData["standbyPlayers"];
      var forceStandbyPlayers = [];
      var allPlayers = [];

      if (pagedata.playersPreviewData) {
        gameWeek = pagedata.playersPreviewData.gameWeek;
        //var gameMonth = nextMonday.toISOString().split('-')[1];

        // maintain the original state by cloning initial pageload objects
        originalState.redPlayers = [ ...pagedata.playersPreviewData["redPlayers"] ];
        originalState.bluePlayers = [ ...pagedata.playersPreviewData["bluePlayers"] ];
        originalState.standbyPlayers = [ ...pagedata.playersPreviewData["standbyPlayers"] ];
        originalState.gameWeek = gameWeek;

        if (gameWeek) {
          document.getElementById("teamTitle").innerHTML = "<H3>Preview Teams for " + gameWeek + "</H3>";
        }
        document.getElementById("description").innerHTML = "Change teams as required and click update";
        //document.getElementById("forceStandbyDescription").innerHTML = "In case teams change, force these players onto standby.<br>Last updated:" + pagedata.playersPreviewData["lastUpdated"];

        updateHtmlSelect();
        updatePlayerChoice();

        // add autocomplete to the newPlayerInput
        autocomplete(document.getElementById("newPlayerInput"), playerNameSuggestions);
      }

      function updateHtmlSelect() {
        var i, L = document.getElementById("redPlayerSelect").options.length - 1;
        for(i = L; i >= 0; i--) {
           document.getElementById("redPlayerSelect").remove(i);
           document.getElementById("bluePlayerSelect").remove(i);
           document.getElementById("standbyPlayerSelect").remove(i);
        }

        allPlayers = redPlayers.concat(bluePlayers, standbyPlayers);
        // options
        for (var i = 0; i < allPlayers.length; i++) {
          var playerName = allPlayers[i];
          createOptionElementForPlayer(playerName, "redPlayerSelect", redPlayers);
          createOptionElementForPlayer(playerName, "bluePlayerSelect", bluePlayers);
          createOptionElementForPlayer(playerName, "standbyPlayerSelect", standbyPlayers);
        }
      }

      function createOptionElementForPlayer(playerName, optionElementId, playersSelectedArray) {
        var playerRatio = "0";
        if (playersGamesPlayedRatio[playerName]) {
          playerRatio = playersGamesPlayedRatio[playerName][algorithmType + "ratio"];
        }
        var option = document.createElement("option");
        option.id = optionElementId + playerName;
        option.text = playerName + " = (" + playerRatio + ")";
        if (playersSelectedArray.includes(playerName)) {
          option.setAttribute('selected', 'true');
        }
        document.getElementById(optionElementId).add(option);
        addMouseDownToSelect(document.getElementById(optionElementId));
      }

      function changeAlgorithm(newAlgorithmType) {
        algorithmType = newAlgorithmType;
        // need to clone these (which means it must be destructive - maybe fix?)
        let clonePlayers = { ...pagedata.players }
        let clonePlayersPreviewData = { ...pagedata.playersPreviewData }
        playersGamesPlayedRatio = changeAlgorithmForPlayers(algorithmType, clonePlayers, clonePlayersPreviewData, allAttendanceData, aliasToPlayerMap, nextMondayOptionIndex, algorithmRange);
        updateHtmlSelect();
        updatePlayerChoice();
      }

      function changeAlgorithmRange(newAlgorithmRange) {
        algorithmRange = newAlgorithmRange;
        /*
        //// IDEALLY DO NOT WANT TO DO THIS - IT'S Server side to recalc the number of months history (loses current state)
        // calculate updated URL
        var newURL = window.location.href;
        if (window.location.href.includes("algorithmRange=")) {
          newURL = window.location.href.replace(/(algorithmRange=)\w+/g, 'algorithmRange=' + algorithmRange);
        } else {
          (window.location.href.includes("?")) ? newURL += "&" : newURL += "?";
          newURL += "algorithmRange=" + algorithmRange;
        }
        // update the URL (without refreshing) to reflect tab change
        window.history.pushState({}, 'unused', newURL);
        location.reload(true);
        */

        // need to clone these (which means it must be destructive - maybe fix?)
        let clonePlayers = { ...pagedata.players }
        let clonePlayersPreviewData = { ...pagedata.playersPreviewData }
        playersGamesPlayedRatio = changeAlgorithmForPlayers(algorithmType, clonePlayers, clonePlayersPreviewData, allAttendanceData, aliasToPlayerMap, nextMondayOptionIndex, algorithmRange);
        updateHtmlSelect();
        updatePlayerChoice();
      }

      function savePreviewTeams() {
        console.log("Saving - updated teams...", currentState);
        // now send the POST request with the data
        var xmlhttp = new XMLHttpRequest();
        xmlhttp.onreadystatechange = function() {
          if (this.readyState == 4 && this.status == 200) {
            console.log("Saved response", this.responseText);
            location.reload(true);
            document.getElementById("response").innerHTML = "Success!";
            //document.getElementById("submit").disabled = true;
          } else if (this.readyState == 4) {
            document.getElementById("response").innerHTML = "Error!  Something went wrong";
          }
        };
        currentState.lastUpdated = "Custom:" + new Date().toISOString();
        xmlhttp.open("POST", "/services/update-game-week-preview");
        xmlhttp.setRequestHeader("Content-Type", "application/json");
        xmlhttp.send(JSON.stringify(currentState));
      }

      // add a new player to the gameweek from the name entered in the text box
      function saveAddPlayer() {
        console.log("Saving - Adding new player...", currentState);
        var playerName = document.getElementById("newPlayerInput").value;
        pagedata.playersPreviewData["standbyPlayers"].push(playerName);
        updateHtmlSelect();
        updatePlayerChoice();
      }

      // change the default behaviour on desktop to not need ctrl for multi-select
      function addMouseDownToSelect(selectElement) {
        selectElement.onmousedown = function (e) {
          var el = e.target;
          if (el.tagName.toLowerCase() == 'option' && el.parentNode.hasAttribute('multiple')) {
            e.preventDefault();
            // toggle selection
            if (el.hasAttribute('selected')) el.removeAttribute('selected');
            else el.setAttribute('selected', '');
            // hack to correct buggy behavior
            var select = el.parentNode.cloneNode(true);
            el.parentNode.parentNode.replaceChild(select, el.parentNode);
            // re-add the mouse-down listener and update the teams text
            addMouseDownToSelect(select);
            updatePlayerChoice();
          }
        }
      }

      function updatePlayerChoice() {
        currentState = {};
        currentState.redPlayers = [];
        currentState.bluePlayers = [];
        currentState.standbyPlayers = [];
        currentState.gameWeek = gameWeek;
        // clone all players list to use for validation
        var allPlayersCopy = [...allPlayers];
        var failedValidationPlayers = [];
        var additionalPlayers = [];
        var removedPlayers = [];
        // loop through all players and create text
        var teamListText = "REDS\n";
        var teamListRatiosText = "\n";
        var redOptions = document.getElementById("redPlayerSelect").options;
        var redTotalRatio = 0;
        for (var i=0; i<redOptions.length; i++) {
          if (redOptions[i].selected) {
            var playerName = redOptions[i].value.split(" = (")[0];
            var playerRatio = Number(redOptions[i].value.split(" = (")[1].split(")")[0]);
            redTotalRatio += playerRatio;
            teamListText += playerName + "\n"; //redOptions[i].value + "\n";
            teamListRatiosText += playerRatio + "\n";
            currentState.redPlayers.push(playerName);
            validatePlayerSelection(allPlayersCopy, playerName, failedValidationPlayers);
          }
        }
        teamListRatiosText += "=" + redTotalRatio.toFixed(2) + "\n";

        teamListText += "\nBLUES\n";
        teamListRatiosText += "\n";
        var blueOptions = document.getElementById("bluePlayerSelect").options;
        var blueTotalRatio = 0;
        for (var i=0; i<blueOptions.length; i++) {
          if (blueOptions[i].selected) {
            var playerName = blueOptions[i].value.split(" = (")[0];
            var playerRatio = Number(blueOptions[i].value.split(" = (")[1].split(")")[0]);
            blueTotalRatio += Number(blueOptions[i].value.split(" = (")[1].split(")")[0]);
            teamListText += playerName + "\n"; //blueOptions[i].value + "\n";
            teamListRatiosText += playerRatio + "\n";
            currentState.bluePlayers.push(playerName);
            validatePlayerSelection(allPlayersCopy, playerName, failedValidationPlayers);
          }
        }
        teamListRatiosText += "=" + blueTotalRatio.toFixed(2) + "\n";

        teamListText += "\nSTANDBY\n";
        teamListRatiosText += "\n";
        var standbyOptions = document.getElementById("standbyPlayerSelect").options;
        for (var i=0; i<standbyOptions.length; i++) {
          if (standbyOptions[i].selected) {
            var playerName = standbyOptions[i].value.split(" = (")[0];
            var playerRatio = Number(standbyOptions[i].value.split(" = (")[1].split(")")[0]);
            teamListText += playerName + "\n"; //standbyOptions[i].value + "\n";
            teamListRatiosText += playerRatio + "\n";
            currentState.standbyPlayers.push(playerName);
            validatePlayerSelection(allPlayersCopy, playerName, failedValidationPlayers);
          }
        }
        
        // perform various validations
        var allOriginalPlayers = originalState.redPlayers.concat(originalState.bluePlayers, originalState.standbyPlayers);
        var allCurrentPlayers = currentState.redPlayers.concat(currentState.bluePlayers, currentState.standbyPlayers);
        // check for additional players (compared to saved list)
        additionalPlayers = allCurrentPlayers.filter(x => !allOriginalPlayers.includes(x));
        var additionalPlayersText = "";
        if (additionalPlayers.length > 0) {
          //additionalPlayersText += "ADDED\n";
          for (var i=0; i<additionalPlayers.length; i++) {
            additionalPlayersText += additionalPlayers[i] + " - ADDED\n";
          }
        }

        // check for removed players (compared to saved list)
        removedPlayers = allOriginalPlayers.filter(x => !allCurrentPlayers.includes(x));
        // check removedPlayers is now empty (any remaining fails validation)
        var removedPlayersText = "";
        if (removedPlayers.length > 0) {
          //removedPlayersText += "REMOVED\n";
          for (var i=0; i<removedPlayers.length; i++) {
            removedPlayersText += removedPlayers[i] + " - REMOVED\n";
          }
        }

        // check allPlayersCopy is now empty (any remaining fails validation)
        failedValidationPlayers = failedValidationPlayers.concat(allPlayersCopy);
        failedValidationPlayers = failedValidationPlayers.filter(x => !removedPlayers.includes(x));
        var invalidText = "";
        if (failedValidationPlayers.length > 0) {
          //invalidText += "\nINVALID\n";
          for (var i=0; i<failedValidationPlayers.length; i++) {
            invalidText += failedValidationPlayers[i] + " - INVALID\n";
          }
          document.getElementById("submit").disabled = true; 
        } else {
          document.getElementById("submit").disabled = false; 
        }

        var unevenSidesText = "";
        if (currentState.redPlayers.length != currentState.bluePlayers.length) {
          unevenSidesText = "\n(UNEVEN SIDES: " + currentState.redPlayers.length + " vs " + currentState.bluePlayers.length + ")\n";
        }
        //document.getElementById("teamList").innerHTML = "<pre>" + teamListText + "</pre>";
        //document.getElementById("invalidList").innerHTML = "<pre>" + invalidText + "</pre>";
        document.getElementById("teamList").value = teamListText;
        document.getElementById("teamListRatios").value = teamListRatiosText;
        document.getElementById("invalidList").value =  removedPlayersText + additionalPlayersText + invalidText + unevenSidesText;

        document.getElementById("teamList").style.height = document.getElementById("teamList").scrollHeight + 'px';
        document.getElementById("teamListRatios").style.height = document.getElementById("teamList").scrollHeight + 'px';
        document.getElementById("invalidList").style.height = document.getElementById("teamList").scrollHeight + 'px';
      }


      function validatePlayerSelection(playersLeft, playerName, failedValidationPlayers) {
        const index = playersLeft.indexOf(playerName);
        if (index > -1) {
          playersLeft.splice(index, 1);
        } else {
          // player not found - validation issue
          failedValidationPlayers.push(playerName);
        }
      }

    </script>

</body>
</html>
