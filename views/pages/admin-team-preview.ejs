<!DOCTYPE html>
<html lang="en">
<head>
  <%- include ("../partials/header.ejs") %>
      <script src="/autocomplete.js"></script>
</head>

<body class="w3-light-grey">
  <%- include ("../partials/nav.ejs") %>
  <!-- Page content -->
  <div class="w3-content" style="max-width:2000px;margin-top:46px;margin-left: 10px;">
    <div class="borderdiv">
      <br>
      <div id="teamTitle"><H3>Teams not yet generated - please try later</H3></div>

      <div id="description"></div>
        <div class="panelcontentouter">
        <div class="panelcontentinnerleft" style="width: 33%">
          <label for="redPlayerSelect" style="width: 100%">Reds:</label>
          <select id="redPlayerSelect" multiple onchange="updatePlayerChoice(this)" size="16" style="width: 100%" >
          </select>
        </div>
        <div class="panelcontentinnerright" style="width: 33%">
          <label for="bluePlayerSelect" style="width: 100%">Blues:</label>
          <select id="bluePlayerSelect" multiple onchange="updatePlayerChoice(this)" size="16" style="width: 100%" >
          </select>
        </div>
        <div class="panelcontentinnerright" style="width: 33%">
          <label for="standbyPlayerSelect" style="width: 100%">Standby:</label>
          <select id="standbyPlayerSelect" multiple onchange="updatePlayerChoice(this)" size="16" style="width: 100%" >
          </select>
        </div>
        <div style="clear:both;"></div>
      </div>
      <button id="submit" style="background-color: #90EE90;float:left;" type="button" onclick="savePreviewTeams();">Save</button>
      <div id="response"></div>
      <br><p>

      <div id="chooseOptionAlgorithm" style="display:inline;">
        <select name="algorithmChoice" id="algorithmChoice" checked onchange="changeAlgorithm(this.value)">
          <option value="algorithm0">Random</option>
          <option value="algorithm1">Win Ratio</option>
          <option value="algorithm2">Win+Draw Ratio</option>
          <option value="algorithm3">Avg Score Per Game</option>
          <option value="algorithm4">Total Score Per Game</option>
          <option value="algorithm5">Most Played</option>
          <option value="algorithm6">Goals Per Game</option>
        </select>
      </div>
      <div id="chooseOptionAlgorithm" style="display:inline;">
        <select name="algorithmChoiceRange" id="algorithmChoiceRange" checked onchange="changeAlgorithmRange(this.value)">
          <option value="12">12 Months</option>
          <option value="6">6 Months</option>
          <option value="3">3 Months</option>
          <option value="999999999">Since Jan23</option>
        </select>
      </div>
      <div style="clear:both;"></div>

      <div id="toggleAddPlayer" class="expandable" onclick="toggleVisbility(this);">Add another player</div>
      <div class="autocomplete">
        <input type="text" id="newPlayerInput" placeholder="Full name" hidden></input>
        <button id="submitAddPlayer" style="background-color: #90EE90;" type="button" onclick="saveAddPlayer();" hidden>Add</button>
      </div>
      <div style="clear:both;"></div>

      <div class="panelcontentouter">
        <div class="panelcontentinnerleft" style="width: 20%">
          <div id="teamListRatiosDiv"><textarea id="teamListRatios" style="overflow:hidden; background-color: transparent; border:0; padding-right: 10px; text-align: right; color: #666; width: 100%;" readonly></textarea></div>
        </div>
        <div class="panelcontentinnerleft" style="width: 40%">
          <div id="teamListDiv"><textarea id="teamList" style="overflow:hidden; background-color: transparent; border:0; width: 100%;" readonly></textarea></div>
        </div>
        <div class="panelcontentinnerright" style="width: 40%">
          <div id="invalidListDiv" style="color:red"><textarea id="invalidList" style="overflow:hidden; background-color: transparent; border:0; width: 100%; color:red" readonly></textarea></div>
        </div>
        <div style="clear:both;"></div>
      </div>

      <!--
      <div id="forceStandby">
        <label for="forceStandbyPlayerSelect" style="width: 100%">Force Standby List:</label>
        <select id="forceStandbyPlayerSelect" multiple onchange="updateStandbyChoice(this)" size="18" style="width: 100%" >
        </select>
      </div>
      <div id="forceStandbyDescription"></div>
      -->

    </div>
  </div>
    
    <script type="text/javascript">
      <%- include ("./generate-teams-utils.js") %>

      var monthDateNumericFormat = new Intl.DateTimeFormat('en', { month: '2-digit' });
      const localeDateOptions = { weekday: 'short', year: 'numeric', month: 'long', day: 'numeric', };

      var gameWeek = "NOT YET SET";
      var allPlayers = [];
      var currentState = {};
      var originalState = {};
      originalState.redPlayers = [];
      originalState.bluePlayers = [];
      originalState.standbyPlayers = [];
      originalState.gameWeek = gameWeek;

      // restringify and then parse the json to get the page
      var pagedata = JSON.parse(JSON.stringify(<%- pageData %>));
      console.log(pagedata);

      var playerAliasMaps = pagedata.players.playerAliasMaps;
      var playerToAliasMap = playerAliasMaps["playerToAliasMap"];
      var aliasToPlayerMap = playerAliasMaps["aliasToPlayerMap"];
      // create list of active players (used in the autocomplete dropdown)
      var playerNameSuggestions = [];
      var fullAliasList = Object.keys(playerToAliasMap);
      for (var i = 0; i < fullAliasList.length; i++) { 
        var playerName = fullAliasList[i];
        if (playerToAliasMap[playerName].subscriptionStatus > 0) {
          playerNameSuggestions.push(playerName);
        }
      }

      var allAttendanceData = pagedata.allAttendanceData;
      if (!allAttendanceData) { allAttendanceData = {}; }
      gameWeek = pagedata.playersPreviewData.gameWeek;


      // change the algorithm for all players and regenerate teams
      var algorithmIndex = new URL(document.location.href).searchParams.get("algorithm");
      var selectAlgorithm = (algorithmIndex && algorithmIndex <= document.getElementById("algorithmChoice").length) ? algorithmIndex : 6;
      document.getElementById("algorithmChoice").selectedIndex = selectAlgorithm;
      var dateRangeParam = new URL(document.location.href).searchParams.get("dateRange");
      if (!dateRangeParam) { dateRangeParam = "12" };
      document.getElementById("algorithmChoiceRange").value = dateRangeParam;
      var algorithmType = document.getElementById("algorithmChoice").value;
      var nextMondayOptionIndex = 2;
      // need to clone these (which means it must be destructive - maybe fix?)
      let clonePlayers = { ...pagedata.players }
      let clonePlayersPreviewData = { ...pagedata.playersPreviewData }
      var playersGamesPlayedRatio = changeAlgorithmForPlayers(algorithmType, clonePlayers, clonePlayersPreviewData, allAttendanceData, aliasToPlayerMap, nextMondayOptionIndex, dateRangeParam);
      //console.log("playersGamesPlayedRatio", playersGamesPlayedRatio)

      var redPlayers = pagedata.playersPreviewData["redPlayers"];
      var bluePlayers = pagedata.playersPreviewData["bluePlayers"];
      var standbyPlayers = pagedata.playersPreviewData["standbyPlayers"];
      var forceStandbyPlayers = [];
      var allPlayers = [];

      if (pagedata.playersPreviewData) {
        //var gameMonth = nextMonday.toISOString().split('-')[1];

        // maintain the original state by cloning initial pageload objects
        originalState.redPlayers = [ ...pagedata.playersPreviewData["redPlayers"] ];
        originalState.bluePlayers = [ ...pagedata.playersPreviewData["bluePlayers"] ];
        originalState.standbyPlayers = [ ...pagedata.playersPreviewData["standbyPlayers"] ];
        originalState.gameWeek = gameWeek;

        if (gameWeek) {
          var gameWeekDate = new Date(gameWeek);
          gameWeekDate.setHours(18);
          //var gameWeekString = gameWeekDate.toISOString().split('T')[0];
          var gameWeekString = gameWeekDate.toLocaleDateString('en-GB', localeDateOptions);
          document.getElementById("teamTitle").innerHTML = "<H3>" + pagedata.playersPreviewData.status + ": " + gameWeekString + "</H3>"; 
        }
        document.getElementById("description").innerHTML = "Change teams and click Save...";
        //document.getElementById("forceStandbyDescription").innerHTML = "In case teams change, force these players onto standby.<br>Last updated:" + pagedata.playersPreviewData["lastUpdated"];

        updateHtmlSelect();
        updatePlayerChoice();

        // add autocomplete to the newPlayerInput
        autocomplete(document.getElementById("newPlayerInput"), playerNameSuggestions);
      }

      function toggleVisbility(e) {
        //console.log("Clicked...", e);
        var elementIds = [];
        if (e.id == "toggleAddPlayer") {
          elementIds = ["newPlayerInput", "submitAddPlayer"];
        } else {
          // unknown element so return
          return;
        }

        // now perform the toggle
        if (e.className == "expandable") {
          for(i = 0; i < elementIds.length; i++) {
            document.getElementById(elementIds[i]).hidden = false;
          }
          e.className = "contractable";
        } else {
          for(i = 0; i < elementIds.length; i++) {
            document.getElementById(elementIds[i]).hidden = true;
          }
          e.className = "expandable";
        }
      }

      function updateHtmlSelect() {
        var i, L = document.getElementById("redPlayerSelect").options.length - 1;
        for(i = L; i >= 0; i--) {
           document.getElementById("redPlayerSelect").remove(i);
           document.getElementById("bluePlayerSelect").remove(i);
           document.getElementById("standbyPlayerSelect").remove(i);
        }

        allPlayers = redPlayers.concat(bluePlayers, standbyPlayers);
        // options
        for (var i = 0; i < allPlayers.length; i++) {
          var playerName = allPlayers[i];
          createOptionElementForPlayer(playerName, "redPlayerSelect", redPlayers);
          createOptionElementForPlayer(playerName, "bluePlayerSelect", bluePlayers);
          createOptionElementForPlayer(playerName, "standbyPlayerSelect", standbyPlayers);
        }
      }

      function createOptionElementForPlayer(playerName, optionElementId, playersSelectedArray) {
        var playerRatio = "0.00"; // default to 0
        if (playersGamesPlayedRatio[playerName]) {
          playerRatio = playersGamesPlayedRatio[playerName][algorithmType + "ratio"];
          playerRatio = Number(playerRatio).toFixed(2);
        }
        var option = document.createElement("option");
        option.id = optionElementId + playerName;
        option.text = playerName + " (" + playerRatio + ")";
        if (playersSelectedArray.includes(playerName)) {
          option.setAttribute('selected', 'true');
        }
        document.getElementById(optionElementId).add(option);
        addMouseDownToSelect(document.getElementById(optionElementId));
      }

      function changeAlgorithm(newAlgorithmType) {
        algorithmType = newAlgorithmType;
        // need to clone these (which means it must be destructive - maybe fix?)
        let clonePlayers = { ...pagedata.players }
        let clonePlayersPreviewData = { ...pagedata.playersPreviewData }
        var dateRange = document.getElementById("algorithmChoiceRange").value;
        playersGamesPlayedRatio = changeAlgorithmForPlayers(algorithmType, clonePlayers, clonePlayersPreviewData, allAttendanceData, aliasToPlayerMap, nextMondayOptionIndex, dateRange);
        updateHtmlSelect();
        updatePlayerChoice();
        updateURL();
      }

      function changeAlgorithmRange(newDateRange) {
        dateRange = newDateRange;
        updateURL();

        //IDEALLY DO NOT WANT TO DO THIS - it's Server side to recalc the number of months history (loses current team state)
        if (!confirm('Changing the date range will lose any unsaved team changes. \nAre you sure?')) return;
        location.reload(true);
        /*
        // need to clone these (which means it must be destructive - maybe fix?)
        let clonePlayers = { ...pagedata.players }
        let clonePlayersPreviewData = { ...pagedata.playersPreviewData }
        playersGamesPlayedRatio = changeAlgorithmForPlayers(algorithmType, clonePlayers, clonePlayersPreviewData, allAttendanceData, aliasToPlayerMap, nextMondayOptionIndex, dateRange);
        updateHtmlSelect();
        updatePlayerChoice();
        */
      }

      function updateURL() {
        var algorithm = document.getElementById("algorithmChoice").value.replace("algorithm", "");
        var dateRange = document.getElementById("algorithmChoiceRange").value;
        // calculate updated URL
        var newURL = window.location.href.split('?')[0] += "?date=" + gameWeek + "&algorithm=" + algorithm + "&dateRange=" + dateRange;
        // update the URL (without refreshing) to reflect change
        window.history.pushState({}, 'unused', newURL);
      }

      function savePreviewTeams() {
        console.log("Saving - updated teams...", currentState);
        // now send the POST request with the data
        var xmlhttp = new XMLHttpRequest();
        xmlhttp.onreadystatechange = function() {
          if (this.readyState == 4 && this.status == 200) {
            console.log("Saved response", this.responseText);
            location.reload(true);
            document.getElementById("response").innerHTML = "Success!";
            //document.getElementById("submit").disabled = true;
          } else if (this.readyState == 4) {
            document.getElementById("response").innerHTML = "Error!  Something went wrong";
          }
        };
        currentState.lastUpdated = "Custom:" + new Date().toISOString();
        xmlhttp.open("POST", "/services/update-game-week-preview");
        xmlhttp.setRequestHeader("Content-Type", "application/json");
        xmlhttp.send(JSON.stringify(currentState));
      }

      // add a new player to the gameweek from the name entered in the text box
      function saveAddPlayer() {
        console.log("Saving - Adding new player...", currentState);
        var playerName = document.getElementById("newPlayerInput").value;
        pagedata.playersPreviewData["standbyPlayers"].push(playerName);
        updateHtmlSelect();
        updatePlayerChoice();
        toggleVisbility(document.getElementById("toggleAddPlayer"));
      }

      // change the default behaviour on desktop to not need ctrl for multi-select
      function addMouseDownToSelect(selectElement) {
        selectElement.onmousedown = function (e) {
          var el = e.target;
          if (el.tagName.toLowerCase() == 'option' && el.parentNode.hasAttribute('multiple')) {
            e.preventDefault();
            // toggle selection
            if (el.hasAttribute('selected')) el.removeAttribute('selected');
            else el.setAttribute('selected', '');
            // hack to correct buggy behavior
            var select = el.parentNode.cloneNode(true);
            el.parentNode.parentNode.replaceChild(select, el.parentNode);
            // re-add the mouse-down listener and update the teams text
            addMouseDownToSelect(select);
            updatePlayerChoice();
          }
        }
      }

      function updatePlayerChoice() {
        var algorithmUnit = ALGORITHM_UNITS[algorithmType]; // constant from generateTeamUtils
        currentState = {};
        currentState.redPlayers = [];
        currentState.bluePlayers = [];
        currentState.standbyPlayers = [];
        currentState.gameWeek = gameWeek;
        currentState.ratios = { "algorithmUnit": algorithmUnit, "redRatioTotal": 0, "blueRatioTotal": 0 };
        // clone all players list to use for validation
        var allPlayersCopy = [...allPlayers];
        var failedValidationPlayers = [];
        var additionalPlayers = [];
        var removedPlayers = [];
        // loop through all players and create text
        var redRatioText = "";
        var blueRatioText = "";
        /////////////
        var teamListRatiosText = "\n";
        var redOptions = document.getElementById("redPlayerSelect").options;
        var redTotalRatio = 0;
        var redTeamListText = "";
        for (var i=0; i<redOptions.length; i++) {
          if (redOptions[i].selected) {
            var playerName = redOptions[i].value.split(" (")[0];
            var playerRatio = Number(redOptions[i].value.split(" (")[1].split(")")[0]);
            redTotalRatio += playerRatio;
            redTeamListText += playerName + "\n"; //redOptions[i].value + "\n";
            teamListRatiosText += playerRatio + "\n";
            currentState.redPlayers.push(playerName);
            validatePlayerSelection(allPlayersCopy, playerName, failedValidationPlayers);
          }
        }
        // update ratio totals
        currentState.ratios.redRatioTotal = redTotalRatio.toFixed(2);
        teamListRatiosText += "=" + redTotalRatio.toFixed(2) + "\n";
        teamListRatiosText += "\n";


        var blueTeamListText = "";
        var blueOptions = document.getElementById("bluePlayerSelect").options;
        var blueTotalRatio = 0;
        for (var i=0; i<blueOptions.length; i++) {
          if (blueOptions[i].selected) {
            var playerName = blueOptions[i].value.split(" (")[0];
            var playerRatio = Number(blueOptions[i].value.split(" (")[1].split(")")[0]);
            blueTotalRatio += Number(blueOptions[i].value.split(" (")[1].split(")")[0]);
            blueTeamListText += playerName + "\n"; //blueOptions[i].value + "\n";
            teamListRatiosText += playerRatio + "\n";
            currentState.bluePlayers.push(playerName);
            validatePlayerSelection(allPlayersCopy, playerName, failedValidationPlayers);
          }
        }
        // update ratio totals
        currentState.ratios.blueRatioTotal = blueTotalRatio.toFixed(2);
        teamListRatiosText += "=" + blueTotalRatio.toFixed(2) + "\n";

        var standbyTeamListText = "";
        teamListRatiosText += "\n";
        var standbyOptions = document.getElementById("standbyPlayerSelect").options;
        for (var i=0; i<standbyOptions.length; i++) {
          if (standbyOptions[i].selected) {
            var playerName = standbyOptions[i].value.split(" (")[0];
            var playerRatio = Number(standbyOptions[i].value.split(" (")[1].split(")")[0]);
            standbyTeamListText += playerName + "\n"; //standbyOptions[i].value + "\n";
            teamListRatiosText += playerRatio + "\n";
            currentState.standbyPlayers.push(playerName);
            validatePlayerSelection(allPlayersCopy, playerName, failedValidationPlayers);
          }
        }

        // now combine into one text
        var teamListText = "REDS" + " (" + algorithmUnit + ": " + Number(redTotalRatio).toFixed(2) + ")\n";
        teamListText += redTeamListText;
        teamListText += "\nBLUES" + " (" + algorithmUnit + ": " + Number(blueTotalRatio).toFixed(2) + ")\n";
        teamListText += blueTeamListText;
        teamListText += "\nSTANDBY\n";
        teamListText += standbyTeamListText;
        teamListText += "\nTotal Players: " + (currentState.redPlayers.length + currentState.bluePlayers.length + currentState.standbyPlayers.length);
        
        // perform various validations
        var allOriginalPlayers = originalState.redPlayers.concat(originalState.bluePlayers, originalState.standbyPlayers);
        var allCurrentPlayers = currentState.redPlayers.concat(currentState.bluePlayers, currentState.standbyPlayers);
        // check for additional players (compared to saved list)
        additionalPlayers = allCurrentPlayers.filter(x => !allOriginalPlayers.includes(x));
        var additionalPlayersText = "";
        if (additionalPlayers.length > 0) {
          //additionalPlayersText += "ADDED\n";
          for (var i=0; i<additionalPlayers.length; i++) {
            additionalPlayersText += additionalPlayers[i] + " - ADDED\n";
          }
        }

        // check for removed players (compared to saved list)
        removedPlayers = allOriginalPlayers.filter(x => !allCurrentPlayers.includes(x));
        // check removedPlayers is now empty (any remaining fails validation)
        var removedPlayersText = "";
        if (removedPlayers.length > 0) {
          //removedPlayersText += "REMOVED\n";
          for (var i=0; i<removedPlayers.length; i++) {
            removedPlayersText += removedPlayers[i] + " - REMOVED\n";
          }
        }

        // check allPlayersCopy is now empty (any remaining fails validation)
        failedValidationPlayers = failedValidationPlayers.concat(allPlayersCopy);
        failedValidationPlayers = failedValidationPlayers.filter(x => !removedPlayers.includes(x));
        var invalidText = "";
        if (failedValidationPlayers.length > 0) {
          //invalidText += "\nINVALID\n";
          for (var i=0; i<failedValidationPlayers.length; i++) {
            invalidText += failedValidationPlayers[i] + " - INVALID\n";
          }
          //document.getElementById("submit").disabled = true; 
        } else {
          document.getElementById("submit").disabled = false; 
        }

        var unevenSidesText = "";
        if (currentState.redPlayers.length != currentState.bluePlayers.length) {
          unevenSidesText = "\n(UNEVEN SIDES: " + currentState.redPlayers.length + " vs " + currentState.bluePlayers.length + ")\n";
        }
        //document.getElementById("teamList").innerHTML = "<pre>" + teamListText + "</pre>";
        //document.getElementById("invalidList").innerHTML = "<pre>" + invalidText + "</pre>";
        document.getElementById("teamList").value = teamListText;
        document.getElementById("teamListRatios").value = teamListRatiosText;
        document.getElementById("invalidList").value =  removedPlayersText + additionalPlayersText + invalidText + unevenSidesText;

        document.getElementById("teamList").style.height = document.getElementById("teamList").scrollHeight + 'px';
        document.getElementById("teamListRatios").style.height = document.getElementById("teamList").scrollHeight + 'px';
        document.getElementById("invalidList").style.height = document.getElementById("teamList").scrollHeight + 'px';
      }


      function validatePlayerSelection(playersLeft, playerName, failedValidationPlayers) {
        const index = playersLeft.indexOf(playerName);
        if (index > -1) {
          playersLeft.splice(index, 1);
        } else {
          // player not found - validation issue
          failedValidationPlayers.push(playerName);
        }
      }

    </script>

</body>
</html>
