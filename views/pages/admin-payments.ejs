
  <script type="text/javascript">
  
    function closeMonthGeneratePayments() {
      var attendanceDetails = { "gameYear": gameYear, "gameMonth": gameMonth };
      // now send the POST request with the data
      var xmlhttp = new XMLHttpRequest();
      xmlhttp.onreadystatechange = function() {
        if (this.readyState == 4 && this.status == 200) {
          console.log("Saved response", this.responseText);
          location.reload(true);
        }
      };
      xmlhttp.open("POST", "/create-payments-for-month");
      xmlhttp.setRequestHeader("Content-Type", "application/json");
      xmlhttp.send(JSON.stringify(attendanceDetails));
    }

    function editPayments() {
      // toggle the button
      var isEditing = false;
      var editPaymentsButton = document.getElementById("editPaymentsButton"); 
      var cancelPaymentsButton = document.getElementById("cancelPaymentsButton"); 
      if (editPaymentsButton.innerHTML == "Edit") {
        editPaymentsButton.innerHTML = "Save"
        cancelPaymentsButton.disabled = false;
        isEditing = false;
      } else {
        editPaymentsButton.innerHTML = "Edit"
        cancelPaymentsButton.disabled = true;
        isEditing = true;
      }

      // show/hide the checkboxes
      var currentPlayerNumber = 0;
      var paydetails = {};

      Object.keys(attendanceMap).sort().forEach(function(playerName) {
        var playerNameElement = document.getElementById("player" + playerName + "NamePayment"); 
        var playerPaymentAmountElement = document.getElementById("player" + currentPlayerNumber + "AmountPayment"); 
        var paymentLinkElement = document.getElementById("player" + currentPlayerNumber + "LinkPayment"); 
        if (playerPaymentAmountElement) {
          playerPaymentAmountElement.hidden = isEditing;

          var paymentNumber = 0;
          (playerPaymentAmountElement.value) ? paymentNumber += playerPaymentAmountElement.value : newURL += 0;
          paydetails[playerNameElement.innerHTML] = paymentNumber;
        }
        currentPlayerNumber++;
      })

      if (editPaymentsButton.innerHTML == "Edit") {
        // now send the POST request with the data
        var savedata = { "gameYear": gameYear, "gameMonth": gameMonth, "paydetails": paydetails };
        console.log("SAVING PAYMENTS:" + JSON.stringify(savedata));
        var xmlhttp = new XMLHttpRequest();
        xmlhttp.onreadystatechange = function() {
          if (this.readyState == 4 && this.status == 200) {
            console.log("Saved response", this.responseText);
            location.reload(true);
          }
        };
        xmlhttp.open("POST", "/save-payment");
        xmlhttp.setRequestHeader("Content-Type", "application/json");
        xmlhttp.send(JSON.stringify(savedata));
      }
    }

    function addPaymentsToTab() {
      var currentPlayerNumber = 0;

      // sort by paid status, split names into separate arrays and then concat together
      var playersPaid = {};
      var playersUnPaid = {};
      Object.keys(attendanceMap).sort().forEach(function(playerName) {
        // count the amount owed for each game that they actively played
        var amountOwed = 0;
        Object.keys(attendanceMap[playerName]).sort().forEach(function(games) {
          if (attendanceMap[playerName][games]) { amountOwed += 4; }
        })

        var outstandingBalance = amountOwed;
        if (paydetailsMap[playerName]) {
          outstandingBalance = amountOwed - paydetailsMap[playerName];
        }
        //console.log(playerName, amountOwed, paydetailsMap[playerName], outstandingBalance)
        if (outstandingBalance <= 0) { 
          playersPaid[playerName] = amountOwed;
        } else {
          playersUnPaid[playerName] = amountOwed;
        }
      })

      //var playersOrdered = playersUnPaid.concat(playersPaid);
      let playersOrdered = {
          ...outstandingPaymentsMap,
          ...playersUnPaid,
          ...playersPaid
      };



      var outstandingPaymentsThisMonthMap = {};
      // count the number of games that they actively played
      Object.keys(playersOrdered).forEach(function(playerName) {
        var numberOfGames = 0;
        var amountOwed = 0;
        var amountPaid = 0;
        var outstandingBalance = 0;
        if (attendanceMap[playerName]) {
          Object.keys(attendanceMap[playerName]).sort().forEach(function(games) {
            if (attendanceMap[playerName][games]) { numberOfGames++; }
          })
          if (paydetailsMap[playerName]) { amountPaid = Number(paydetailsMap[playerName]); }
          amountOwed = Number(playersOrdered[playerName]);
          outstandingBalance = (numberOfGames*4) - amountPaid;
          //console.log(playerName, (numberOfGames), amountOwed, amountPaid, outstandingBalance)
        } else {
          numberOfGames = 0;
        }
        // add to the map
        outstandingPaymentsThisMonthMap[playerName] = { "numberOfGames": numberOfGames, "amountOwed": amountOwed, "amountPaid": amountPaid, "outstandingBalance": outstandingBalance}
      });

      var panelcontentouter = document.getElementById("paymentsEntryDiv");
      if (Object.keys(outstandingPaymentsMap).length > 0) {
        panelcontentouter.appendChild(document.createTextNode("Outstanding Balances:"));
        addPaymentsTableRows(outstandingPaymentsMap, false);
        panelcontentouter.appendChild(document.createElement("br"));
      }
      panelcontentouter.appendChild(document.createTextNode("This Month:"));
      addPaymentsTableRows(outstandingPaymentsThisMonthMap, true);

}
function addPaymentsTableRows(paymentsMap, showEditTotals = true) {
      var overallGamesTotal = 0;
      var overallOwesTotal = 0;
      var overallPaidTotal = 0;
      var currentPlayerNumber = 0;

      var panelcontentouter = document.getElementById("paymentsEntryDiv");
      const tbl = document.createElement('table');
      //tbl.style.width = '100%';
      const trHeader = tbl.insertRow();
      trHeader.insertCell()
      // games total
      const tdGamesHeader = trHeader.insertCell();
      tdGamesHeader.style.textAlign = 'center';
      tdGamesHeader.appendChild(document.createTextNode("Games"));
      // owes total
      const tdOwesHeader = trHeader.insertCell();
      tdOwesHeader.style.textAlign = 'center';
      tdOwesHeader.appendChild(document.createTextNode("Owes"));
      // paypal total
      const tdPaypalHeader = trHeader.insertCell();
      tdPaypalHeader.style.textAlign = 'center';
      tdPaypalHeader.appendChild(document.createTextNode("PayPal Link"));
      // paid total
      //const tdPaidHeader = trHeader.insertCell();
      //tdPaidHeader.style.textAlign = 'center';
      //tdPaidHeader.appendChild(document.createTextNode("Paid (£)"));
      panelcontentouter.appendChild(tbl);

      Object.keys(paymentsMap).forEach(function(playerName) {
        // create new row for table
        var numberOfGames = paymentsMap[playerName]["numberOfGames"];
        if (numberOfGames > 0) {
          const tr = tbl.insertRow();
          var amountOwed = paymentsMap[playerName]["amountOwed"];
          var amountPaid = paymentsMap[playerName]["amountPaid"];
          var outstandingBalance = paymentsMap[playerName]["outstandingBalance"];

          // add table cell
          const tdName = tr.insertCell();
          tdName.appendChild(document.createTextNode(playerName));
          tdName.setAttribute("id", "player" + playerName + "NamePayment");

          // add table cell
          const tdGames = tr.insertCell();
          tdGames.style.textAlign = 'center';
          tdGames.appendChild(document.createTextNode(numberOfGames));

          // add table cell
          const tdOwed = tr.insertCell();
          tdOwed.style.textAlign = 'center';
          tdOwed.appendChild(document.createTextNode("£" + amountOwed));

          var paymentLinkElement = document.createElement("a");
          paymentLinkElement.setAttribute("id", "player" + currentPlayerNumber + "LinkPayment"); 
          if (outstandingBalance > 0) {
            var paymentLink = "https://www.paypal.me/philroffe/" + outstandingBalance;
            var linkText = document.createTextNode("(PayPal £" + outstandingBalance + ")");
            paymentLinkElement.appendChild(linkText);
            paymentLinkElement.href = paymentLink;
            paymentLinkElement.style.color = "darkblue";
          }
          // add table cell
          const tdLink = tr.insertCell();
          tdLink.style.textAlign = 'center';
          tdLink.appendChild(paymentLinkElement);

          // add input field for amount paid
          var playerPaymentAmountElement = document.createElement("input"); 
          playerPaymentAmountElement.setAttribute("type", "text"); 
          if (showEditTotals) {
            playerPaymentAmountElement.setAttribute("id", "player" + currentPlayerNumber + "AmountPayment"); 
            playerPaymentAmountElement.setAttribute("name", currentPlayerNumber + "myPayments[]"); 
          }
          playerPaymentAmountElement.value = amountPaid;
          playerPaymentAmountElement.hidden = true;
          playerPaymentAmountElement.style.maxHeight = "22px";
          playerPaymentAmountElement.style.maxWidth = "40px";
          playerPaymentAmountElement.style.padding = "0px 0px 0px 5px";
          // add text for amount paid
          var paidElement = document.createElement("text");
          paidElement.setAttribute("id", "player" + currentPlayerNumber + "PaidPayment"); 
          if (amountPaid > 0) {
            var text = "£" + amountPaid;
            if (outstandingBalance == 0) {
              text += " &#10003;";
            } else if (outstandingBalance < 0) {
              text += " &#10003; £" + outstandingBalance;
            } else {
              text += " (?) £" + outstandingBalance;
            }
            paidElement.innerHTML = text;
          }
          // add table cell
          //const tdPaid = tr.insertCell();
          //tdPaid.style.textAlign = 'center';
          //tdPaid.appendChild(paidElement);
          //tdPaid.appendChild(playerPaymentAmountElement);
          
          overallGamesTotal += numberOfGames;
          overallOwesTotal += amountOwed;
          overallPaidTotal += amountPaid;

          currentPlayerNumber++;
        }
      })

      if (showEditTotals) {
        // create new row for table
        const tr = tbl.insertRow();
        const tdNameTotal = tr.insertCell();

        // games total
        const tdGamesTotal = tr.insertCell();
        tdGamesTotal.style.textAlign = 'center';
        tdGamesTotal.appendChild(document.createTextNode(overallGamesTotal));
        // owes total
        const tdOwesTotal = tr.insertCell();
        tdOwesTotal.style.textAlign = 'center';
        tdOwesTotal.appendChild(document.createTextNode("£" + overallOwesTotal));
        // outstanding total
        const tdOutstandingTotal = tr.insertCell();
        tdOutstandingTotal.style.textAlign = 'center';
        tdOutstandingTotal.appendChild(document.createTextNode("£" + (overallOwesTotal - overallPaidTotal)));
        // tdOutstandingTotal total
        //const tdPaidTotal = tr.insertCell();
        //tdPaidTotal.style.textAlign = 'center';
        //tdPaidTotal.appendChild(document.createTextNode("£" + overallPaidTotal));
      }
    }

  </script>