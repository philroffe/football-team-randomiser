<html>
<head>
  <%- include ("../partials/header.ejs") %>
  <script src="/autocomplete.js"></script>
</head>

<body>
  <%- include ("../partials/nav.ejs") %>
<!-- Page content -->
<div class="fball-content" style="max-width:2000px;margin-top:46px;margin-left: 10px;">

<div id="year">
  <h3>Month: 
  <input type="month" class="gameMonthInput" id="gameMonthInput" name="start" min="2022-03" value="2022-04">
  </h3>
</div>

<div id="description">Footie, 6pm Mondays, Goodwin, Sport Sheffield</div>
<div id="location"><a href="https://goo.gl/maps/6CcWirgU6bVMEqbt8">Northumberland Rd, Sheffield, S10 2TY</a></div>

<p>
<div class="warpper">
  <input class="radio" id="one" name="group" type="radio" checked>
  <input class="radio" id="two" name="group" type="radio">
  <input class="radio" id="three" name="group" type="radio">
  <div class="tabs">
  <label class="tab" id="one-tab" for="one">Availability</label>
  <label class="tab" id="two-tab" for="two">Attendance</label>
  <label class="tab" id="three-tab" for="three">Payments</label>
    </div>
  <div id="panels" class="panels">
  <div class="panel" id="one-panel">
    <div class="content">
      <div class="panel-title">Availability</div>
      <div id="availabilityHeader" class="gameheader"></div>
      <div id="editHeader" class="gameheader"><br></div>
      <div style="clear:both;"></div>
      <button id="addPlayer" style="background-color: #90EE90;" type="button" onclick="addPlayer();">(+) Add Player</button>
      <button id="cancelEdit" onclick="location.reload()" disabled=true>Cancel</button>
      <p><p>Finished? <a href="/teams">Generate teams and email</a>, or view the <a href="/poll-log">log of poll entries.</a>.
    </div>
  </div>
  <div class="panel" id="two-panel">
    <div class="content">
      <div class="panel-title">Attendance</div>For admin access only.

      <div id="tempPasswordEntryDiv">
        <form>
        <input type="password" id="passwordInput" placeholder="Enter Password" minlength="8" required></input>
        <button type="submit" id="checkPasswordButton" onclick="checkPassword();">Submit</button>
        </form>
      </div>

      <div id="tempPasswordOKDiv" hidden=true>
        <!-- Simple (insecure) way to hide a feature - a form of feature flag rather than password -->
        <div id="attendanceHeader" class="gameheader"></div>
        <div style="clear:both;"></div>
        <button id="copyAvailabilityButton" style="background-color: #90EE90;" type="button" onclick="copyAttendanceFromAvailability();" disabled=true><-- Copy from Availability</button><br><br>
        <button id="saveAttendanceButton" style="background-color: #90EE90;" type="button" onclick="saveCurrentEdittingWeek();" disabled=true>Save Attendance</button>
        <button id="cancelAttendanceEditButton" onclick="location.reload()" disabled=true>Cancel</button>
      </div>
    </div>
  </div>
  <div class="panel" id="three-panel">
    <div class="panel-title">Payments</div>
    <div class="content">
      <p>Payment summary coming at the end of the month...</p>
    </div>
  </div>
  </div>
</div>


  <script type="text/javascript">
    const AVAILABILITY = "availability";
    const ATTENDANCE = "attendance";
    const PAYMENT = "payment";

    var monthDateFormat = new Intl.DateTimeFormat('en', { month: 'long' });
    var monthDateNumericFormat = new Intl.DateTimeFormat('en', { month: '2-digit' });
    var dayDateFormat = new Intl.DateTimeFormat('en', { day: '2-digit' });

    var playerCount = {};
    playerCount[AVAILABILITY] = 0;
    playerCount[ATTENDANCE] = 0;
    playerCount[PAYMENT] = 0;

    var todayDate = new Date();
    var playerElements = {};
    var saving = true;
    // annoying workaround to some mumbo-jumbo to convert a valid object client-side ()
    var pagedata =  JSON.parse("<%= JSON.stringify(pageData) %>".replace(/&#34;/g, '"'));
    //console.log('Data=' + JSON.stringify(pagedata));
 
    var isAdmin = pagedata.isAdmin;

    var bankHolidaysJson = pagedata.bankHolidays;
    var selectedMonthDate = new Date(pagedata.data.gameid);
    var gameMonth = monthDateNumericFormat.format(selectedMonthDate);
    var gameYear = selectedMonthDate.getFullYear();
    var nextMonday = pagedata.data.nextMonday;
    var nextMondayDate = new Date(nextMonday);
 

    var pollDate = new Date("01 " + monthDateFormat.format(selectedMonthDate) + " " + gameYear);
    console.log(pollDate);
    var gameMonthString = monthDateFormat.format(nextMondayDate);
    var newMaxDate = new Date(nextMondayDate).setMonth(nextMondayDate.getMonth()+1)
     // update the header month input selector
    document.getElementById("gameMonthInput").max = gameYear + monthDateNumericFormat.format(newMaxDate)
    document.getElementById("gameMonthInput").value = gameYear + "-" + gameMonth
    document.getElementById("gameMonthInput").addEventListener('change', function() {
      var selectedDate = document.getElementById("gameMonthInput").value
      document.location.href = '/poll?date=' + selectedDate + '-01'
    });

    var players = pagedata.data.players;
    if (!players) { players = {}; }
    var attendanceMap = pagedata.data.attendance;
    if (!attendanceMap) { attendanceMap = {}; }
    var allOriginalPlayers = {}
    // now quickly add any players not yet attended to the attendanceMap
    Object.keys(players).sort().forEach(function(player) {
      if (!attendanceMap[player]) {
        attendanceMap[player] = {};
      }
    });

    var playerAliasMaps = pagedata.data.playerAliasMaps;
    var playerToAliasMap = playerAliasMaps["playerToAliasMap"];
    var aliasToPlayerMap = playerAliasMaps["aliasToPlayerMap"];
    var playerNameSuggestions = Array.from(Object.keys(playerToAliasMap));
    //console.log("PLAYER NAME SUGGESTIONS:" + JSON.stringify(playerNameSuggestions));

    mondaysDates = mondaysInMonth(pollDate.getMonth()+1, pollDate.getFullYear());  //=> [ 7,14,21,28 ]

    //populate the tabs
    addPlayerListToTab(AVAILABILITY);
    addPlayerListToTab(ATTENDANCE);
    //addPlayerListToTab(PAYMENT);

    // populate the weekly total counts
    calcWeeklyTotals(AVAILABILITY);
    calcWeeklyTotals(ATTENDANCE);
    //calcWeeklyTotals("PAYMENT");

    var adminPasswordHash = "YmlnY2hhbmNl";

    // if admin cookie (feature toggle) already set then check it and auto show
    var accessLevelCookie = getCookie("accessLevel");
    if (accessLevelCookie == adminPasswordHash) {
      document.getElementById("tempPasswordOKDiv").hidden = false;
      document.getElementById("tempPasswordEntryDiv").hidden = true;
    }

    function checkPassword() {
      var password = document.getElementById("passwordInput").value;
      console.log("PPP=" + password + " " + btoa(password));
      if (btoa(password) == adminPasswordHash) {
        document.getElementById("tempPasswordOKDiv").hidden = false;
        document.getElementById("tempPasswordEntryDiv").hidden = true;
        setCookie("accessLevel", adminPasswordHash, 8);
      }
    }
    function getCookie(cname) {
      let name = cname + "=";
      let decodedCookie = decodeURIComponent(document.cookie);
      let ca = decodedCookie.split(';');
      for(let i = 0; i <ca.length; i++) {
        let c = ca[i];
        while (c.charAt(0) == ' ') {
          c = c.substring(1);
        }
        if (c.indexOf(name) == 0) {
          return c.substring(name.length, c.length);
        }
      }
      return "";
    }
    function setCookie(cname, cvalue, exhours) {
      const d = new Date();
      d.setTime(d.getTime() + (exhours*60*60*1000));
      let expires = "expires="+ d.toUTCString();
      document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
    }

    function mondaysInMonth(m,y) {
      var days = new Date(y,m,0).getDate();
      var mondays =  new Date(m +'/01/'+ y).getDay();
      if (mondays != 1){
        mondays = 9 - mondays;
      }
      mondays = [mondays];
      //console.log(mondays);
      for (var i = mondays[0] + 7; i <= days; i += 7) {
        mondays.push(i);
      }
      return mondays;
    }

    function getDayOfMonthSuffix(n) {
        //checkArgument(n >= 1 && n <= 31, "illegal day of month: " + n);
        if (n >= 11 && n <= 13) {
            return "th";
        }
        switch (n % 10) {
            case 1:  return "st";
            case 2:  return "nd";
            case 3:  return "rd";
            default: return "th";
        }
    }

function addPlayerListToTab(tabName) {
    var divElementToAppendTo = document.getElementById(tabName + "Header")
    var nameHeader = document.createElement("div");
    nameHeader.setAttribute("id", "nameHeader" + tabName); 
    nameHeader.setAttribute("class", "gameheader"); 
    nameHeader.appendChild(document.createElement("br"));
    divElementToAppendTo.appendChild(nameHeader);

    // auto generate divs for headers for each game week
    for (var i = 0; i < mondaysDates.length; i ++) {
      var newWeekHeader = document.createElement("div");
      newWeekHeader.setAttribute("id", "week" + i + "Header" + tabName); 
      newWeekHeader.setAttribute("class", "gameheader"); 
      // create a totals header...
      var newWeekTotal = document.createElement("i");
      newWeekTotal.setAttribute("id", "week" + i + "Total" + tabName); 
      newWeekTotal.innerHTML = '0';
      newWeekHeader.appendChild(newWeekTotal);
      newWeekHeader.appendChild(document.createElement("br"));

      // check whether a bank holiday
      var isBankHoliday = false;
      var currentDateHeaderDate = new Date("2022-01-01 12:00:00");
      currentDateHeaderDate.setYear(pollDate.getFullYear());
      currentDateHeaderDate.setMonth(pollDate.getMonth())
      currentDateHeaderDate.setDate(mondaysDates[i])
      currentDateHeaderDate.setHours(12, 12, 12);

      Object.keys(bankHolidaysJson).forEach(function(key) {
        if (key == "england-and-wales") {
          for (var j = 0; j < bankHolidaysJson[key].events.length; j++) {
            var bankHolDate = new Date(bankHolidaysJson[key].events[j].date);
            if (bankHolDate.toISOString().split('T')[0] == currentDateHeaderDate.toISOString().split('T')[0]) {
              isBankHoliday = true;
            }
          }
        }
      });

      // create a date header
      currentDateHeader = mondaysDates[i] + getDayOfMonthSuffix(mondaysDates[i]);

      const weekDateHeader = document.createElement("i");
      if (isBankHoliday) {
        currentDateHeader = "<strike>" + currentDateHeader + "</strike>";
        newWeekHeader.setAttribute("bankHoliday", true);
      }
      weekDateHeader.innerHTML = currentDateHeader;
      newWeekHeader.appendChild(weekDateHeader);
      divElementToAppendTo.appendChild(newWeekHeader);  

      //if (isAdmin) {
      if (tabName == ATTENDANCE) {
        // create the edit button
        var weekEditButton = document.createElement("button");
        weekEditButton.innerHTML = "e";
        weekEditButton.style.backgroundColor = "lightgreen";
        weekEditButton.setAttribute("id", "week" + i + "Edit" + tabName);
        weekEditButton.setAttribute("class", "rotated"); 
        const chosenEditWeek = i;
        weekEditButton.onclick = function() {editWeek(chosenEditWeek)};
        newWeekHeader.appendChild(document.createElement("br"));
        newWeekHeader.appendChild(weekEditButton);

        if (isBankHoliday) {
          weekEditButton.setAttribute("hidden", true); 
        }
      }
    }
    //if (isAdmin) {
    if (tabName == ATTENDANCE) {
      // just add a dummy button to the name header to space it out
      var dummyAdminNameButton = document.createElement("button");
      dummyAdminNameButton.setAttribute("class", "noborder"); 
      dummyAdminNameButton.setAttribute("disabled", true); 
      //nameHeader = document.getElementById("nameHeader")
      nameHeader.appendChild(document.createElement("br"));
      nameHeader.appendChild(dummyAdminNameButton);
    }

    var playersMapForTab = {};

    switch(tabName) {
      case AVAILABILITY:
        playersMapForTab = players;
        break;
      case ATTENDANCE:
        playersMapForTab = attendanceMap;
        break;
      case PAYMENT:
        // code block
        break;
      default:
        // code block
    }

    //console.log("tabName: " + tabName);
    //console.log(pagedata.data.players);
    //console.log("playersMapForTab: " + JSON.stringify(playersMapForTab));
    //console.log("playersMapForTab Adam B week1: " + JSON.stringify(playersMapForTab["Adam B"]["week1"]));

    // now loop through all saved players and pre-populate their availability
    var weekNumber = 1;
    Object.keys(playersMapForTab).sort().forEach(function(player) {
      //console.log('player=' + player + "___" + JSON.stringify(playersMapForTab[player]) + "__tab__" + tabName);
      playerName = player
      playerName = decodeHtml(player)
      var playerSelection = playersMapForTab[player];
      //console.log("_____ " + playerName + " " + JSON.stringify(playerSelection));
      var officialPlayerName = getOfficialNameFromAlias(player, aliasToPlayerMap);
      addPlayer(playerName, playerSelection, officialPlayerName, tabName)
    });
  //});

console.log('-----------------------')
    /*// create a spacer before adding the attendees only
    nameHeader.appendChild(document.createElement("br"));
    for (var i = 0; i < mondaysDates.length; i ++) {
      document.getElementById("week" + i + "Header" + tabName).appendChild(document.createElement("br"));            
    }
    editHeader.appendChild(document.createElement("br"));*/

    /*if (tabName == "attendance") {
    // add the attendees only - any players in attendance that didn't add themselves as players
    for (var i = 0; i < mondaysDates.length; i ++) {
      var attendanceMap = attendance["week" + i];
      //attendanceMap[officialPlayerName]
      if (attendanceMap) {
        console.log('attendanceMap=' + i + "___" + JSON.stringify(attendanceMap));
        Object.keys(attendanceMap).sort().forEach(function(key) {
          var attendedOfficialPlayerName = key;
          // check matching attendee in the player list
          var foundMatch = false;
          for (var i = 1; i < 999; i++) {
            var playerElement = document.getElementById("player" + i + tabName); 
            if (playerElement == null) { break; }
            var officialPlayerName = playerElement.getAttribute("title");
            if (attendedOfficialPlayerName == officialPlayerName) {
              // attendee found in original player list, so skip
              foundMatch = true;
              break;
            }
          }
          if (!foundMatch) {
            // attendee not found in original player list, so add it to the bottom
            console.log("NOT MATCHED: " + foundMatch + " - " + attendedOfficialPlayerName + " " + officialPlayerName);
            addPlayer(attendedOfficialPlayerName, false, attendedOfficialPlayerName, tabName)
          }
        });
      }
    }
    }*/
}

    // populate the weekly total counts
    function calcWeeklyTotals(tabName) {
      for (var j = 0; j < mondaysDates.length; j++) {
        var weekTotalSummary = document.getElementById("week" + j + "Total" + tabName);
        weekTotalSummary.innerHTML = 0

        var currentTotal = 0;
        var tabPlayerCount = playerCount[tabName];
        //console.log("tabName " + tabName + " tabPlayerCount " + tabPlayerCount);
        for (var i = 1; i <= tabPlayerCount; i++) {
          if (document.getElementById("player" + i + "Week" + j + tabName).checked) {
            currentTotal++;
          }
        }
        weekTotalSummary.innerHTML = "(" + currentTotal + ")";
      }
    }

    // simple function to decode special chars (such as apostrophies)
    function decodeHtml(html) {
        var txt = document.createElement("textarea");
        txt.innerHTML = html;
        return txt.value;
    }

    // get the official name from a map of aliases (using case insensitive search)
    function getOfficialNameFromAlias(nameToCheck, aliasToPlayerMap) {
      nameToCheck = nameToCheck.trim();
      var officialName = undefined;
      var fullAliasList = Object.keys(aliasToPlayerMap);
      for (var i = 0; i < fullAliasList.length; i++) { 
        if (nameToCheck.toUpperCase() == fullAliasList[i].toUpperCase()) {
          officialName = aliasToPlayerMap[nameToCheck.toUpperCase()]
        }
      }
      if (!officialName) {
        console.log("WARNING: Failed to find official name for:", nameToCheck);
      }
      return officialName;
    }

    // add an additional text box and hook up listeners
    function addPlayer(playerName, availabilityMap, officialPlayerName, tabName = "availability") {
      //update the player count for this tab
      var tabPlayerCount = playerCount[tabName];
      tabPlayerCount++;
      playerCount[tabName] = tabPlayerCount;
      if (tabPlayerCount > 100) {
        // set a max list of names (just to protect a little)
        return;
      }
      var nameHeader = document.getElementById("nameHeader" + tabName);
      
      // create a player text box
      var newPlayerName = document.createElement("input"); 
      newPlayerName.setAttribute("type", "text"); 
      newPlayerName.setAttribute("id", "player" + tabPlayerCount + tabName); 
      newPlayerName.setAttribute("name", "myPlayers[]"); 
      if (officialPlayerName) {
        newPlayerName.setAttribute("title", officialPlayerName);
        newPlayerName.style.background = "url(/regular.png)";
      } else {
        //newPlayerName.style.backgroundColor = "transparent";
        newPlayerName.style.background = "url(/new-icon.png)";
      }
      newPlayerName.style.backgroundPosition = "right";
      newPlayerName.style.backgroundRepeat = "no-repeat";
      newPlayerName.style.backgroundSize = "20px 20px";
      newPlayerName.style.width = 90;
      // create an autocomplete div to add the player input to
      newPlayerName.setAttribute("autocomplete", "off"); 
      autocomplete(newPlayerName, playerNameSuggestions);
      var newPlayerDiv = document.createElement("div"); 
      newPlayerDiv.setAttribute("class", "autocomplete"); 
      newPlayerDiv.appendChild(newPlayerName);
      // add the div to the nameHeader element to add it to the page
      nameHeader.appendChild(document.createElement("br"));
      nameHeader.appendChild(newPlayerDiv);

      // Determine whether input should be editable
      allOriginalPlayers["player" + tabPlayerCount] = playerName
      if (playerName) {
        newPlayerName.setAttribute("value", playerName); 
        newPlayerName.setAttribute("disabled", true); 
      } else {
        newPlayerName.setAttribute("placeholder", "Your Name?"); 
        newPlayerName.focus();
        newPlayerName.select();
      }

/*      //if (isAdmin) {
      if (tabName == "attendance") {
        // add Admin ability for the name column
        var officialPlayerHeader = document.createElement("input");
        officialPlayerHeader.value = "Played?";
        officialPlayerHeader.style.width = 120;
        newPlayerName.style.width = 120; // also set the newPlayerName input to match
        officialPlayerHeader.style.fontSize = "0.9em";
        officialPlayerHeader.setAttribute("class", "noborder"); 
        officialPlayerHeader.setAttribute("disabled", true); 
        nameHeader.appendChild(document.createElement("br"));
        nameHeader.appendChild(officialPlayerHeader);
        nameHeader.appendChild(document.createElement("br"));
      }*/
      
      for (var i = 0; i < mondaysDates.length; i ++) {
        //console.log("=============" + i + );
        var weekHeader = document.getElementById("week" + i + "Header" + tabName)
        var newPlayerWeek = document.createElement("input"); 
        newPlayerWeek.setAttribute("type", "checkbox"); 
        newPlayerWeek.setAttribute("class", "checkmark"); 
        newPlayerWeek.setAttribute("id", "player" + tabPlayerCount + "Week" + i + tabName); 
        newPlayerWeek.setAttribute("name", tabPlayerCount + "myPlayerWeek[]"); 
        if (playerName) {
          // existing player so check as needed
          newPlayerWeek.disabled = true;
          if (availabilityMap && availabilityMap[i]) {
            newPlayerWeek.checked = true;
          } else {
            newPlayerWeek.checked = false;
          }
          //console.log(playerName + " " + mondaysDates[i] + "=" + availabilityMap[mondaysDates[i]])
        } else {
          // new player so assume default checked
          newPlayerWeek.checked = true;
        }
        if (weekHeader.getAttribute("bankHoliday")) {
          newPlayerWeek.setAttribute("type", "hidden"); 
          newPlayerWeek.checked = false;
        }
        weekHeader.appendChild(document.createElement("br"));
        weekHeader.appendChild(newPlayerWeek);
      }


      if (tabName == "availability") {
        // create the edit button
        var newPlayerEditButton = document.createElement("button");
        newPlayerEditButton.type = "button";
        newPlayerEditButton.innerHTML = "Edit...";
        newPlayerEditButton.style.backgroundColor = "lightgreen";
        newPlayerEditButton.setAttribute("class", "editButton"); 
        newPlayerEditButton.setAttribute("id", "player" + tabPlayerCount + "Edit" + tabName);
        //console.log("CREATED " + "player" + tabPlayerCount + "Edit" + tabName);

        var editHeader = document.getElementById("editHeader")
        editHeader.appendChild(document.createElement("br"));
        editHeader.appendChild(newPlayerEditButton);
        if (!playerName) {
          // new player so toggle Edit button to Save
          newPlayerEditButton.innerHTML = "Save";
        } else {
          //newPlayerEditButton.innerHTML = "<span>&#10003;</span>"; //Tick
        }
        newPlayerEditButton.onclick = function() {editPlayer(playerName, newPlayerEditButton)};
      }

      if (isAdmin) {
      //if (tabName == "attendance") {
        // TODO... NEEDS IMPROVING - this tabName check doesn't work!
        // add Admin capability for the edit column
        var newAdminEditHeader = document.createElement("input");
        newAdminEditHeader.value = "";
        newAdminEditHeader.style.width = 10;
        newAdminEditHeader.setAttribute("class", "noborder"); 
        newAdminEditHeader.setAttribute("disabled", true); 
        editHeader.appendChild(document.createElement("br"));
        editHeader.appendChild(newAdminEditHeader);
        editHeader.appendChild(document.createElement("br"));
        // now hide the edit button per player (replaced with single admin save)
        newPlayerEditButton.setAttribute("hidden", true); 
        document.getElementById("addPlayer").hidden = true; 
      } else {
        document.getElementById("addPlayer").hidden = false; 
      }

      if (!playerName) {
        // new player so enable the save/cancel button, and disable
        document.getElementById("cancelEdit").disabled = false; 
        document.getElementById("cancelEdit").style.backgroundColor = "lightsalmon";
        for (var i = 1; i <= tabPlayerCount-1; i++) {
          console.log("element=" + document.getElementById("player" + i + "Edit" + tabName))
          console.log("pppp=" + "player" + i + "Edit" + tabName)
          console.log("expecting=player1Editavailability")

          ////// TODO - it's creating "attendance", but for some reason not "availability".  Need availability.

          document.getElementById("player" + i + "Edit" + tabName).disabled = true; 
          document.getElementById("player" + i + "Edit" + tabName).style.backgroundColor = "lightgrey";
        }
      // disable the addPlayer botton
      document.getElementById("addPlayer").disabled = true; 
      document.getElementById("addPlayer").style.backgroundColor = "lightgrey";
      }
      //calcWeeklyTotals(tabName);
      var minHeight = Math.max(600, 350 + (tabPlayerCount * 35));
      document.getElementById("panels").style.minHeight = minHeight + "px";
  }

  function copyAttendanceFromAvailability() {
    var tabName = ATTENDANCE;
    var tabPlayerCount = playerCount[tabName];
    // check which weekEdit button is active
    var weekNumberActive;
    for (var i = 0; i < mondaysDates.length; i ++) {
      var weekEditButton = document.getElementById("week" + i + "Edit" + ATTENDANCE); 
      if (weekEditButton.innerHTML == "s") {
        weekNumberActive = i;
      }
    }
    //console.log("WeekActive:" + weekNumberActive);
    // look through attendance players and lookup the players
    for (var i = 1; i <= tabPlayerCount; i ++) {
      var currentPlayerCheckbox = document.getElementById("player" + i + ATTENDANCE);
      var currentPlayerName = currentPlayerCheckbox.value
      // loopup if available from the availability (players) map
      var playerAvailability = players[currentPlayerName];
      //console.log("Player:=" + currentPlayerName + " week:" + weekNumberActive + " isAvailable:" + JSON.stringify(playerAvailability) + " AvailabileWeek:" + playerAvailability[weekNumberActive]);
      if (playerAvailability) {
        document.getElementById("player" + i + "Week" + weekNumberActive + ATTENDANCE).checked = playerAvailability[weekNumberActive];
      }
    }
    calcWeeklyTotals(ATTENDANCE);
  }

  function saveCurrentEdittingWeek() {
    // check which weekEdit button is active
    for (var i = 0; i < mondaysDates.length; i ++) {
      var weekEditButton = document.getElementById("week" + i + "Edit" + ATTENDANCE); 
      if (weekEditButton.innerHTML == "s") {
        // button toggled as Save, so call editWeek(weekNumber) to save and toggle it back
        editWeek(i);
        return;
      }
    }
  }

  function editWeek(weekNumber) {
    var tabName = ATTENDANCE;
    var tabPlayerCount = playerCount[tabName];
    weekEditButton = document.getElementById("week" + weekNumber + "Edit" + tabName); 
    if (weekEditButton.innerHTML == "s") {
      // button toggled as Save, so save and put back to Edit move
      saveAttendance(weekNumber);
      weekEditButton.innerHTML = "e";
      // re-enable every player's player-status button
      for (var i = 1; i <= tabPlayerCount; i++) {
        document.getElementById("player" + i + "Week" + weekNumber + tabName).setAttribute("class", "checkmark");
      }
      // reenable the other edit buttons
      mondaysDates = mondaysInMonth(pollDate.getMonth()+1, pollDate.getFullYear());  //=> [ 7,14,21,28 ]
      // auto generate divs for headers for each game week
      for (var i = 0; i < mondaysDates.length; i ++) {
        document.getElementById("week" + i + "Edit" + tabName).disabled = false; 

        // re-enable all of the other elements
        for (var j = 1; j <= tabPlayerCount; j++) {
          document.getElementById("player" + j + "Week" + i + tabName).hidden = false;
        }
      }
      document.getElementById("copyAvailabilityButton").disabled = true; 
      document.getElementById("saveAttendanceButton").disabled = true;
      document.getElementById("cancelAttendanceEditButton").disabled = true;
      return;
    }

    // button toggled as Edit, re-enable buttons
    chosenWeek = weekEditButton.id.split('Edit')[0]
    console.log("EDITING weekNumber: " + weekNumber + " chosenWeek:" + chosenWeek);
    // re-enable every player's player-status button
    for (var i = 1; i <= tabPlayerCount; i++) {
      //document.getElementById("player" + i + "Week" + weekNumber + tabName).setAttribute("class", "checksecondary");
      document.getElementById("player" + i + "Week" + weekNumber + tabName).disabled = false;
    }
    
    // disable the other edit buttons
    mondaysDates = mondaysInMonth(pollDate.getMonth()+1, pollDate.getFullYear());  //=> [ 7,14,21,28 ]
    for (var i = 0; i < mondaysDates.length; i ++) {
      if (i != weekNumber) {
        document.getElementById("week" + i + "Edit" + tabName).disabled = true; 

        // hide all of the other elements
        for (var j = 1; j <= tabPlayerCount; j++) {
          document.getElementById("player" + j + "Week" + i + tabName).hidden = true;
        }
      }
    }

    // button currently as Edit, so toggle to "save" mode
    weekEditButton.innerHTML = "s";
    document.getElementById("copyAvailabilityButton").disabled = false; 
    document.getElementById("saveAttendanceButton").disabled = false; 
    document.getElementById("cancelAttendanceEditButton").disabled = false;
  }

    function editPlayer(playerName, newPlayerEditButton) {
      var tabName = "availability";
      if (newPlayerEditButton.innerHTML == "Save") {
        // button toggled as Save, so save and put back to Edit move
        chosenPlayer = newPlayerEditButton.id.split('Edit')[0]
        savePlayer(chosenPlayer);
        newPlayerEditButton.innerHTML = "Edit...";
        newPlayerEditButton.disabled = false; 
        calcWeeklyTotals(tabName);
        return;
      }
      chosenPlayer = newPlayerEditButton.id.split('Edit')[0]
      console.log("EDITING Player: " + playerName + " ChosenPlayer:" + chosenPlayer);
      // disable everything
      var tabPlayerCount = playerCount[tabName];
      for (var i = 1; i <= tabPlayerCount; i++) {
        document.getElementById("player" + i + tabName).disabled = true; 
        for (var j = 0; j < mondaysDates.length; j++) {
          document.getElementById("player" + i + "Week" + j + tabName).disabled = true; 
        }
        document.getElementById("player" + i + "Edit" + tabName).disabled = true; 
        document.getElementById("player" + i + "Edit" + tabName).style.backgroundColor = "lightgrey";
      }

      // renable only the chosen Player
      document.getElementById(chosenPlayer + tabName).disabled = false; 
      for (var j = 0; j < mondaysDates.length; j++) {
        document.getElementById(chosenPlayer + "Week" + j + tabName).disabled = false; 
      }
      document.getElementById(chosenPlayer + "Edit" + tabName).disabled = false; 
      document.getElementById(chosenPlayer + "Edit" + tabName).style.backgroundColor = "lightgreen";
      // enable the cancel button
      document.getElementById("cancelEdit").disabled = false; 
      document.getElementById("cancelEdit").style.backgroundColor = "lightsalmon";
      // disable the addPlayer botton
      document.getElementById("addPlayer").disabled = true; 
      document.getElementById("addPlayer").style.backgroundColor = "lightgrey";

      // button currently as Edit, so toggle to "save" mode
      newPlayerEditButton.innerHTML = "Save";
      calcWeeklyTotals(tabName);
    }
    function delay(time) {
      return new Promise(resolve => setTimeout(resolve, time));
    }

    function saveAttendance(weekNumber) {
      // Save the data (using XMLHttpRequest)
      console.log("SAVING attendance for week: " + weekNumber);
      var tabName = "attendance";

      var playersAttended = {};
      playersAttended[weekNumber] = {};
      var saveType = "ATTENDANCE"
      for (var i = 1; i < 999; i++) {
        var playerElement = document.getElementById("player" + i + tabName); 
        if (!playerElement) {
          console.log("GOT NULL!");
          break;
        }
        var officialPlayerName = playerElement.getAttribute("title");
        var playerName = officialPlayerName;
        if (!officialPlayerName) {
          // new player - no official name yet so use the current value
          playerName = playerElement.value;
        }
        var playerAttended = document.getElementById("player" + i + "Week" + weekNumber + tabName).checked; 
        playersAttended[weekNumber][playerName] = playerAttended;
        console.log("PLAYER DETAILS: " + i + " " + officialPlayerName + " " + playerAttended);
      }

      var attendanceDetails = { "gameYear": gameYear, "gameMonth": gameMonth, "gameWeek": weekNumber, "playersAttended": playersAttended, "saveType": saveType, };

      console.log("SAVING ATTENDANCE:" + JSON.stringify(attendanceDetails));

      // now send the POST request with the data
      var xmlhttp = new XMLHttpRequest();
      xmlhttp.onreadystatechange = function() {
        if (this.readyState == 4 && this.status == 200) {
          console.log("Saved response", this.responseText);
          location.reload(true);
        }
      };
      xmlhttp.open("POST", "/save-week-attendance");
      xmlhttp.setRequestHeader("Content-Type", "application/json");
      xmlhttp.send(JSON.stringify(attendanceDetails));
    }

    function savePlayer(playerId) {
      var tabName = "availability";
      // Save the data (using XMLHttpRequest)
      try {
        var playerName = document.getElementById(playerId + tabName).value;
        var originalPlayerName = allOriginalPlayers[playerName];
        console.log("SAVING Player: " + playerName + " ChosenPlayer:" + playerId);

        // now loop through all saved players and pre-populate their availability
        var allPlayerDetails = {};
        var saveType = "UNKNOWN"
        // check if player is new, edited, or deleted
        console.log("LOOKUP: " + playerId + " Original Name: " + originalPlayerName);
        if (originalPlayerName) {
          console.log("EDITED: " + playerId + " Original Name: " + originalPlayerName);
          // if playername is empty then prefix the original name for deletion upon save
          if (playerName == "") {
            saveType = "DELETE"
            playerName = originalPlayerName;
          } else if (playerName != originalPlayerName) {
            saveType = "RENAME"
          } else {
            saveType = "EDIT"
          }
        } else {
          saveType = "NEW"
          console.log("NEW: " + playerId + " Original Name: " + originalPlayerName);
        }

        if (playerName && playerName != "") {
          var playerAvailability = {};
          for (var j = 0; j < mondaysDates.length; j++) {
            var playerAvailable = document.getElementById(playerId + "Week" + j + tabName).checked
            playerAvailability[j] = playerAvailable;
          }
          allPlayerDetails[playerName] = playerAvailability;
        }

        var gamedetails = { "gameYear": gameYear, "gameMonth": gameMonth, "playerName": playerName, "playerAvailability": playerAvailability, "saveType": saveType, "originalPlayerName": originalPlayerName };

        console.log("SAVING:" + JSON.stringify(gamedetails));

        // now send the POST request with the data
        var xmlhttp = new XMLHttpRequest();
        xmlhttp.onreadystatechange = function() {
          if (this.readyState == 4 && this.status == 200) {
            console.log("Saved response", this.responseText);
            location.reload(true);
          }
        };
        xmlhttp.open("POST", "/save-result");
        xmlhttp.setRequestHeader("Content-Type", "application/json");
        xmlhttp.send(JSON.stringify(gamedetails));
      } catch (error) {
        console.error('There has been a problem with the save-result operation:', error);
        // log this error back to the server to help with debugging
        var xmlhttp = new XMLHttpRequest();
        xmlhttp.open("POST", "/logging");
        xmlhttp.setRequestHeader("Content-Type", "application/json");
        xmlhttp.send( JSON.stringify({ "error": error.stack }) );

        //location.reload(true);
      }
    } // end of savePlayers()

  </script>

</body>
</html>
