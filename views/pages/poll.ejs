<!DOCTYPE html>
<html lang="en">
<head>
  <%- include ("../partials/header.ejs") %>
  <script src="/autocomplete.js"></script>
</head>

<body>
  <%- include ("../partials/nav.ejs") %>
<!-- Page content -->
<div class="fball-content" style="max-width:100%;margin-top:46px;margin-left: 2px;">

<div id="year">
  <h3>Month: 
  <input type="month" class="gameMonthInput" id="gameMonthInput" name="start" min="2019-08" value="2022-04">
  </h3>
</div>

<div id="description">Footie, 6pm Mondays, Goodwin, Sport Sheffield</div>
<div id="location"><a href="https://goo.gl/maps/6CcWirgU6bVMEqbt8">Northumberland Rd, Sheffield, S10 2TY</a></div>

<p>

<div class="warpper">
  <input class="radio" id="one" name="group" type="radio" onclick="changeTab('one');" checked>
  <input class="radio" id="two" name="group" type="radio" onclick="changeTab('two');">
  <input class="radio" id="three" name="group" type="radio" onclick="changeTab('three');">
  <input class="radio" id="four" name="group" type="radio" onclick="changeTab('four');">
  <input class="radio" id="five" name="group" type="radio" onclick="changeTab('five');">
  <div class="tabs">
  <label class="tab" id="one-tab" for="one">Availability</label>
  <label class="tab" id="two-tab" for="two">Attendance</label>
  <label class="tab" id="three-tab" for="three">Payments</label>
  <label class="tab" id="four-tab" for="four">Aliases</label>
  <label class="tab" id="five-tab" for="five">Stats</label>
    </div>
  <div id="panels" class="panels">
  <div class="panel" id="one-panel">
    <div class="content">
      <div class="panel-title">Availability</div>
      <div class="panelcontentouter">
        <!-- do not put anything directly in here, use innerleft and innerright -->
        <div class="panelcontentinnerleft">
          <div id="nameHeaderavailability" class="gameheader"></div>
        </div>
        <div class="panelcontentinnerright">
          <div id="weekHeaderavailability" class="gameheader"></div>
          <div id="editHeaderavailability" class="gameheader"><br></div>
        </div>
      </div>
      <div style="clear:both;"></div>
      <button id="addPlayer" style="background-color: #90EE90;" type="button" onclick="addPlayer();">(+) Add Player</button>
      <button id="cancelEdit" onclick="location.reload()" disabled>Cancel</button>
      <p><p>Finished? <a href="/teams">Generate teams and email</a>, or view the <a href="/poll-log">log of poll entries.</a>.
    </div>
  </div>

  <div class="panel" id="two-panel">
    <div class="content">
      <div class="panel-title">Attendance</div>
      To edit you need to be an admin and login (see menu).<br>
      <div id="attendanceAdmin" hidden>
        Tip: Auto populate email:
        <br><code>teams@tensile-spirit-360708.appspotmail.com</code>
      </div>
        <div class="panelcontentouter">
          <!-- do not put anything directly in here, use innerleft and innerright -->
          <div class="panelcontentinnerleft">
            <div id="nameHeaderattendance" class="gameheader"></div>
          </div>
          <div class="panelcontentinnerright">
            <div id="weekHeaderattendance" class="gameheader"><div style="padding: 4px"></div></div>
            <div id="editHeaderattendance" class="gameheader"><br><br></div>
          </div>
        </div>

        <div style="clear:both;"></div>

        <div id="tempPasswordOKDiv" hidden>
          <div id="scoreHeader" class="gameheader"></div>

          <div id="cancelCheckboxDiv">
            <label id="cancelCheckboxLabel" for="cancelCheckbox">Cancel</label>
            <input id="cancelCheckbox" type="checkbox" name="cancelType" onclick="cancelCurrentEdittingWeek();"/>
            <input type="input" id="cancelWeekDescription" placeholder="Reason: e.g. Snow" data-lpignore=true hidden>
          </div>

          <p><button id="saveAttendanceButton" style="background-color: #90EE90;" type="button" onclick="saveCurrentEdittingWeek();" disabled>Save</button>
          <button id="cancelAttendanceEditButton" onclick="location.reload()" disabled>Cancel</button>
          <p><button id="closeMonthGeneratePaymentsButton" style="background-color: #90EE90;" type="button" onclick="closeMonthGeneratePayments();">Close Month & Copy Availability</button>

          <p>Problem with the list? <a href="/admin-aliases">Check the aliases...</a>
        </div>
    </div>
  </div>
  <div class="panel" id="three-panel">
    <div class="panel-title">Payments</div>
    <div class="content" id="paymentsEntryDiv"></div>
    <div style="clear:both;"></div>
    <div id="paymentsAdmin" hidden>
      <button id="editPaymentsButton" style="background-color: #90EE90;" type="button" onclick="editPayments();">Edit</button>
      <button id="cancelPaymentsButton" onclick="location.reload()" disabled>Cancel</button>
    </div>
  </div>

  <div class="panel" id="four-panel">
    <div class="panel-title">Aliases</div>
      <div class="content" id="aliasEntryDiv">
      Active Players
      <div id="playersAliasHeader"></div><br>
      <button id="addAlias" style="background-color: #90EE90;" type="button" onclick="addAliasPlayer();">(+) Add Player</button>
      <br>
      <button id="saveAlias" style="background-color: #90EE90;" onclick="savePlayerAliases()">Save</button>
      <button id="cancelAliasEdit" onclick="location.reload()" disabled>Cancel</button>
      <p>Inactive Players</p>
      <p><div id="inactivePlayersHeader"></div>
      <br><div id="unusedPlayers"></div><br>
    </div>
  </div>
  <div class="panel" id="five-panel">
    <div class="panel-title">Stats</div>
    You should be redirected automatically.  If not, <a href="/stats">click here to see stats</a>
  </div>

  </div>
</div>

<%- include ("./admin-payments.ejs") %>

  <script>
    document.getElementById("cancelCheckboxDiv").hidden = true;

    const AVAILABILITY = "availability";
    const ATTENDANCE = "attendance";
    const PAYMENT = "payment";

    var monthDateFormat = new Intl.DateTimeFormat('en', { month: 'long' });
    var monthDateNumericFormat = new Intl.DateTimeFormat('en', { month: '2-digit' });
    var dayDateFormat = new Intl.DateTimeFormat('en', { day: '2-digit' });

    var playerCount = {};
    playerCount[AVAILABILITY] = 0;
    playerCount[ATTENDANCE] = 0;
    playerCount[PAYMENT] = 0;

    var todayDate = new Date();
    var playerElements = {};
    var saving = true;
    // restringify and then parse the json to get the page
    var pagedata = JSON.parse(JSON.stringify(<%- pageData %>));
    console.log('Data=', pagedata);

    //var isAdmin = pagedata.isAdmin;

    var tabName = pagedata.selectTab;
    if (document.getElementById(tabName)) {
      document.getElementById(tabName).checked = true;
    }

    var bankHolidaysJson = pagedata.bankHolidays;
    var selectedMonthDate = new Date(pagedata.data.gameid);
    var gameMonth = monthDateNumericFormat.format(selectedMonthDate);
    var gameYear = selectedMonthDate.getFullYear();
    var nextMonday = pagedata.data.nextMonday;
    var nextMondayDate = new Date(nextMonday);
 

    var pollDate = new Date("01 " + monthDateFormat.format(selectedMonthDate) + " " + gameYear);
    console.log(pollDate);
    var gameMonthString = monthDateFormat.format(nextMondayDate);
    var newMaxDate = new Date(nextMondayDate).setMonth(nextMondayDate.getMonth()+1)
     // update the header month input selector
    document.getElementById("gameMonthInput").max = gameYear + monthDateNumericFormat.format(newMaxDate)
    document.getElementById("gameMonthInput").value = gameYear + "-" + gameMonth
    document.getElementById("gameMonthInput").addEventListener('change', function() {
      var selectedDate = document.getElementById("gameMonthInput").value
      document.location.href = '/poll?date=' + selectedDate + '-01'
    });
    

    //console.log("pagedata", pagedata);
    var players = pagedata.data.players;
    if (!players) { players = {}; }
    var attendanceMap = pagedata.data.attendance;
    if (!attendanceMap) { attendanceMap = {}; }
    var scoresMap = pagedata.data.scores;
    if (!scoresMap) { scoresMap = {}; }
    var cancelledMap = pagedata.data.cancelled;
    if (!cancelledMap) { cancelledMap = {}; }
    var paydetailsMap = pagedata.data.paydetails;
    if (!paydetailsMap) { paydetailsMap = {}; }
    var outstandingPaymentsMap = pagedata.data.outstandingPayments;
    if (!outstandingPaymentsMap) { outstandingPaymentsMap = {}; }
    /*
    console.log("players", players);
    console.log("attendanceMap", attendanceMap);
    console.log("scoresMap", scoresMap);
    console.log("paydetailsMap", paydetailsMap);
    console.log("outstandingPaymentsMap", outstandingPaymentsMap);
    */

    var playerAliasMaps = pagedata.data.playerAliasMaps;
    var playerToAliasMap = playerAliasMaps["playerToAliasMap"];
    var aliasToPlayerMap = playerAliasMaps["aliasToPlayerMap"];
    // create list of active players (used in the autocomplete dropdown)
    var playerNameSuggestions = [];
    var fullAliasList = Object.keys(playerToAliasMap);
    for (var i = 0; i < fullAliasList.length; i++) { 
      var playerName = fullAliasList[i];
      if (playerToAliasMap[playerName].subscriptionStatus > 0) {
        playerNameSuggestions.push(playerName);
      }
    }
    /*
    console.log("playerAliasMaps", playerAliasMaps);
    console.log("playerToAliasMap", playerToAliasMap);
    console.log("aliasToPlayerMap", aliasToPlayerMap);
    console.log("playerNameSuggestions", playerNameSuggestions);
    */

    // now quickly add any players not yet attended to the attendanceMap
    Object.keys(players).sort().forEach(function(player) {
      if (!attendanceMap[player]) {
        // player name not find, so lookup the official name
        var officialPlayerName = getOfficialNameFromAlias(player, aliasToPlayerMap);
        //console.log("player:" + player + " _officialPlayerName:" + officialPlayerName);
        if (!attendanceMap[officialPlayerName]) {
          // player name and official name not found, so treat as a new player and add blank entry
          attendanceMap[officialPlayerName] = {};
        }
      }
    });

    mondaysDates = mondaysInMonth(pollDate.getMonth()+1, pollDate.getFullYear());  //=> [ 7,14,21,28 ]

    //populate the tabs
    addPlayerListToTab(AVAILABILITY);
    addPlayerListToTab(ATTENDANCE);
    addPaymentsToTab();
    //addPlayerListToTab(PAYMENT);

    // populate the weekly total counts
    calcWeeklyTotals(AVAILABILITY);
    calcWeeklyTotals(ATTENDANCE);
    //calcWeeklyTotals("PAYMENT");

    if (user) {
      // show edit functionality if there is a valid logged-in user
      document.getElementById("tempPasswordOKDiv").hidden = false;
      document.getElementById("paymentsAdmin").hidden = false;
      document.getElementById("attendanceAdmin").hidden = false;
    } else {
      // no logged-in user so ensure edit buttons are disabled
      const weekEditButtons = document.getElementsByClassName("rotated");
      for (let i = 0; i < weekEditButtons.length; i++) {
        weekEditButtons[i].disabled = true;
        weekEditButtons[i].hidden = true;
      }
      // remove the alias tab completely
      document.getElementById("four-tab").remove();
      document.getElementById("four").remove();
    }


    // check if all scores are in (enables close month and gen payments button)
    var allScoresCompleted = true;
    //console.log(scoresMap)
    if (scoresMap.status == "closed") {
      document.getElementById("closeMonthGeneratePaymentsButton").innerHTML = "Month already closed"
      document.getElementById("closeMonthGeneratePaymentsButton").disabled = true; 
    }

    function changeTab(tabName) {
      if (tabName == "five") {
        window.location.href = "/stats";
      } else {
        // calculate updated URL
        var newURL = window.location.href;
        if (window.location.href.includes("tab=")) {
          newURL = window.location.href.replace(/(tab=)\w+/g, 'tab=' + tabName)
        } else {
          (window.location.href.includes("?")) ? newURL += "&" : newURL += "?";
          newURL += "tab=" + tabName;
        }
        // update the URL (without refreshing) to reflect tab change
        window.history.pushState({}, 'unused', newURL);
      }
    }

    function mondaysInMonth(m,y) {
      var lastDateOfMonth = new Date(y,m,0).getDate();
      var firstDayNumberOfMonth =  new Date(m +'/01/'+ y).getDay(); // 0=Sun, 1=Mon...

      // check what day the 1st of the month is, and then calc the date of the next Monday
      var mondayDate;
      if (firstDayNumberOfMonth == 1) {
        // already a Monday (1st of the month)
        mondayDate = 1;
      } else if (firstDayNumberOfMonth == 0) {
        // it's a Sunday, so Monday is 1 day away (2nd of the month)
        mondayDate = 2;
      } else {
        // must be Tues-Sat so subtract from 9 (because max 7 days from )
        var mondayDate = 7 - (firstDayNumberOfMonth - 2);
      }

      // now loop through every 7 days and form an array of Monday dates
      var mondays = [];
      for (var i = mondayDate; i <= lastDateOfMonth; i += 7) {
        mondays.push(i);
      }

      //console.log("First Monday of month:", new Date(m +'/0' + mondays[0] + '/'+ y));
      //console.log("Mondays in the month:", mondays);
      return mondays;
    }

    function getDayOfMonthSuffix(n) {
        //checkArgument(n >= 1 && n <= 31, "illegal day of month: " + n);
        if (n >= 11 && n <= 13) {
            return "th";
        }
        switch (n % 10) {
            case 1:  return "st";
            case 2:  return "nd";
            case 3:  return "rd";
            default: return "th";
        }
    }


function addPlayerListToTab(tabName) {
    var nameHeader = document.getElementById("nameHeader" + tabName);
    nameHeader.appendChild(document.createElement("br"));
    if (tabName == ATTENDANCE) {
      // spacer for the score items
      nameHeader.appendChild(document.createElement("br"));
      //nameHeader.appendChild(document.createElement("br"));
    }
    var weekHeader = document.getElementById("weekHeader" + tabName);
    var divElementToAppendTo = weekHeader;

    // auto generate divs for headers for each game week
    for (var i = 0; i < mondaysDates.length; i ++) {
      var newWeekHeader = document.createElement("div");
      newWeekHeader.setAttribute("id", "week" + i + "Header" + tabName); 
      newWeekHeader.setAttribute("class", "gameheader"); 
      // create a totals header...
      var newWeekTotal = document.createElement("i");
      newWeekTotal.setAttribute("id", "week" + i + "Total" + tabName); 
      newWeekTotal.innerHTML = '0';
      newWeekHeader.appendChild(newWeekTotal);
      newWeekHeader.appendChild(document.createElement("br"));

      // check whether a bank holiday
      var isBankHoliday = false;
      var currentDateHeaderDate = new Date("2022-01-01 12:00:00");
      currentDateHeaderDate.setYear(pollDate.getFullYear());
      currentDateHeaderDate.setMonth(pollDate.getMonth())
      currentDateHeaderDate.setDate(mondaysDates[i])
      currentDateHeaderDate.setHours(12, 12, 12);

      Object.keys(bankHolidaysJson).forEach(function(key) {
        if (key == "england-and-wales") {
          for (var j = 0; j < bankHolidaysJson[key].events.length; j++) {
            var bankHolDate = new Date(bankHolidaysJson[key].events[j].date);
            if (bankHolDate.toISOString().split('T')[0] == currentDateHeaderDate.toISOString().split('T')[0]) {
              isBankHoliday = true;
            }
          }
        }
      });

      // create a date header
      currentDateHeader = mondaysDates[i] + getDayOfMonthSuffix(mondaysDates[i]);

      const weekDateHeader = document.createElement("i");
      if (isBankHoliday) {
        currentDateHeader = "<s>" + currentDateHeader + "</s>";
        newWeekHeader.setAttribute("bankHoliday", true);
      }
      if (cancelledMap[i]) {
        currentDateHeader = "<s>" + currentDateHeader + "</s>";
      }
      weekDateHeader.innerHTML = currentDateHeader;
      newWeekHeader.appendChild(weekDateHeader);
      divElementToAppendTo.appendChild(newWeekHeader);  

      if (tabName == ATTENDANCE) {
        // create the edit button
        var weekEditButton = document.createElement("button");
        weekEditButton.setAttribute("toggleStatus", "edit");
        weekEditButton.style.backgroundColor = "lightgreen";
        weekEditButton.setAttribute("id", "week" + i + "Edit" + tabName);
        weekEditButton.setAttribute("class", "rotated"); 
        const chosenEditWeek = i;
        weekEditButton.onclick = function() {editWeek(chosenEditWeek)};
        newWeekHeader.appendChild(document.createElement("br"));
        newWeekHeader.appendChild(weekEditButton);

        if (isBankHoliday) {
          weekEditButton.setAttribute("hidden", true); 
        }

        if (cancelledMap[i]) {
          weekEditButton.style.backgroundColor = "LightCoral";
        }

        if (tabName == ATTENDANCE) {
          // create the score items
          var team1Spinner = document.createElement("input");
          team1Spinner.setAttribute("type", "number"); 
          team1Spinner.setAttribute("id", "week" + i + "Score1" + tabName); 
          (scoresMap[i]) ? team1Spinner.value = scoresMap[i].team1goals : team1Spinner.value = "";
          team1Spinner.style.width = Math.max(team1Spinner.value.length*10, 7) + "px";
          team1Spinner.style.maxWidth = "26px";
          team1Spinner.style.maxHeight = "24px";
          team1Spinner.style.textAlign = "right";
          team1Spinner.disabled = true;
          team1Spinner.onclick = function() {this.select()};
          newWeekHeader.appendChild(document.createElement("br"));
          newWeekHeader.appendChild(team1Spinner);
          // create the score items
          var team2Spinner = document.createElement("input");
          team2Spinner.setAttribute("type", "number"); 
          team2Spinner.setAttribute("id", "week" + i + "Score2" + tabName); 
          (scoresMap[i]) ? team2Spinner.value = scoresMap[i].team2goals : team2Spinner.value = "";
          team2Spinner.style.width = Math.max(team2Spinner.value.length*9, 7) + "px";
          team2Spinner.style.maxWidth = "26px";
          team2Spinner.style.maxHeight = "24px";
          team2Spinner.disabled = true;
          team2Spinner.onclick = function() {this.select()};
          var teamSeparator = document.createElement("text");
          teamSeparator.setAttribute("id", "week" + i + "ScoreSeparator" + tabName); 
          teamSeparator.innerHTML = "-";
          if (cancelledMap[i]) {
            teamSeparator.innerHTML = "X"
          }
          teamSeparator.style.padding = "2px 0px 4px 0px";
          newWeekHeader.appendChild(teamSeparator);
          //newWeekHeader.appendChild(document.createElement("br"));
          newWeekHeader.appendChild(team2Spinner);

          var winTeamColour = "white";
          if (scoresMap[i]) {
            if (scoresMap[i].winner == 0) {
              winTeamColour = "grey";
            } else if (scoresMap[i].winner == 1) {
              winTeamColour = "coral";
            } else if (scoresMap[i].winner == 2) {
              winTeamColour = "skyblue";
            }
            team1Spinner.style.backgroundColor = winTeamColour;
            teamSeparator.style.backgroundColor = winTeamColour;
            team2Spinner.style.backgroundColor = winTeamColour;
          }
        }
      }
    }
    
    if (tabName == ATTENDANCE) {
      // just add a dummy button to the name header to space it out
      var dummyAdminNameButton = document.createElement("button");
      dummyAdminNameButton.setAttribute("class", "noborder"); 
      dummyAdminNameButton.setAttribute("disabled", true); 
      dummyAdminNameButton.innerHTML = "Score:";
      dummyAdminNameButton.style.textAlign = "right";
      dummyAdminNameButton.style.width = "100%";
      dummyAdminNameButton.style.color = "black";
      dummyAdminNameButton.style.backgroundColor = "white";
      dummyAdminNameButton.style.padding = "10px 0px";
      //nameHeader = document.getElementById("nameHeader")
      nameHeader.appendChild(document.createElement("br"));
      nameHeader.appendChild(dummyAdminNameButton);
    }

    var playersMapForTab = {};

    switch(tabName) {
      case AVAILABILITY:
        playersMapForTab = players;
        break;
      case ATTENDANCE:
        playersMapForTab = attendanceMap;
        break;
      case PAYMENT:
        // code block
        break;
      default:
        // code block
    }

    // now loop through all saved players and pre-populate their availability
    Object.keys(playersMapForTab).sort().forEach(function(player) {
      //console.log('player=' + player + "___" + JSON.stringify(playersMapForTab[player]) + "__tab__" + tabName);
      playerName = player
      playerName = decodeHtml(player)
      var playerSelection = playersMapForTab[player];
      //console.log("_____ " + playerName, playerSelection);
      var officialPlayerName = getOfficialNameFromAlias(player, aliasToPlayerMap);
      addPlayer(playerName, playerSelection, officialPlayerName, tabName)
    });
}

    // populate the weekly total counts
    function calcWeeklyTotals(tabName) {
      for (var j = 0; j < mondaysDates.length; j++) {
        var weekTotalSummary = document.getElementById("week" + j + "Total" + tabName);
        weekTotalSummary.innerHTML = 0

        var currentTotal = 0;
        var tabPlayerCount = playerCount[tabName];
        //console.log("tabName " + tabName + " tabPlayerCount " + tabPlayerCount);
        for (var i = 0; i < tabPlayerCount; i++) {
          if (document.getElementById("player" + i + "Week" + j + tabName).checked) {
            currentTotal++;
          }
        }
        weekTotalSummary.innerHTML = "(" + currentTotal + ")";
      }
    }

    // simple function to decode special chars (such as apostrophies)
    function decodeHtml(html) {
        var txt = document.createElement("textarea");
        txt.innerHTML = html;
        return txt.value;
    }

    // get the official name from a map of aliases (using case insensitive search)
    function getOfficialNameFromAlias(nameToCheck, aliasToPlayerMap) {
      nameToCheck = nameToCheck.trim();
      var officialName = undefined;
      var fullAliasList = Object.keys(aliasToPlayerMap);
      for (var i = 0; i < fullAliasList.length; i++) { 
        if (nameToCheck.toUpperCase() == fullAliasList[i].toUpperCase()) {
          officialName = aliasToPlayerMap[nameToCheck.toUpperCase()]
        }
      }
      /*if (!officialName) {
        console.log("WARNING: Failed to find official name for:", nameToCheck);
      }*/
      return officialName;
    }

    // add an additional text box and hook up listeners
    function addPlayer(playerName, availabilityMap, officialPlayerName, tabName = "availability") {
      //console.log("Add Player:", playerName, availabilityMap, officialPlayerName, tabName)
      //update the player count for this tab
      var tabPlayerCount = playerCount[tabName];
      currentPlayerNumber = tabPlayerCount;
      tabPlayerCount++;
      if (tabPlayerCount > 100) {
        // set a max list of names (just to protect a little)
        return;
      }
      playerCount[tabName] = tabPlayerCount;
      var nameHeader = document.getElementById("nameHeader" + tabName);
      
      // create a player text box
      var newPlayerName = document.createElement("input"); 
      newPlayerName.setAttribute("type", "text"); 
      newPlayerName.setAttribute("id", "player" + currentPlayerNumber + tabName); 
      newPlayerName.setAttribute("name", "myPlayers[]"); 
      if (officialPlayerName) {
        newPlayerName.setAttribute("title", officialPlayerName);
        if (outstandingPaymentsMap[officialPlayerName]) {
          newPlayerName.style.background = "url(/pound-payment.png)";
        } else {
          newPlayerName.style.background = "url(/regular.png)";
        }
      } else {
        //newPlayerName.style.backgroundColor = "transparent";
        newPlayerName.style.background = "url(/new-icon.png)";
      }
      newPlayerName.style.backgroundPosition = "right";
      newPlayerName.style.backgroundRepeat = "no-repeat";
      newPlayerName.style.backgroundSize = "20px 20px";
      newPlayerName.style.width = "100%";
      // create an autocomplete div to add the player input to
      newPlayerName.setAttribute("autocomplete", "off"); 
      autocomplete(newPlayerName, playerNameSuggestions);
      var newPlayerDiv = document.createElement("div"); 
      newPlayerDiv.setAttribute("class", "autocomplete"); 
      newPlayerDiv.appendChild(newPlayerName);
      // add the div to the nameHeader element to add it to the page
      nameHeader.appendChild(document.createElement("br"));
      nameHeader.appendChild(newPlayerDiv);

      // Determine whether input should be editable
      if (playerName) {
        newPlayerName.setAttribute("value", playerName); 
        newPlayerName.readOnly = true;
      } else {
        newPlayerName.setAttribute("placeholder", "Your Name?"); 
        newPlayerName.focus();
        newPlayerName.select();
      }

      for (var i = 0; i < mondaysDates.length; i ++) {
        //console.log("=============" + i + );
        var weekHeader = document.getElementById("week" + i + "Header" + tabName)
        var newPlayerWeek = document.createElement("input"); 
        newPlayerWeek.setAttribute("type", "checkbox"); 
        newPlayerWeek.setAttribute("class", "checkmark img_goals"); 
        newPlayerWeek.setAttribute("id", "player" + currentPlayerNumber + "Week" + i + tabName); 
        newPlayerWeek.setAttribute("name", currentPlayerNumber + "myPlayerWeek[]"); 
        newPlayerWeek.setAttribute("teamValue", 0); 

        var weekHeader = document.getElementById("week" + i + "Header" + tabName)
        var newPlayerWeekGoals = document.createElement("div");
        newPlayerWeekGoals.setAttribute("class", "overlay_goals overlay_0_goals"); 
        newPlayerWeekGoals.setAttribute("id", "player" + currentPlayerNumber + "Week" + i + tabName + "Goals"); 

        if (scoresMap[i] && scoresMap[i].team1scorers) {
          //console.log("_____ " + playerName, scoresMap[i].team1scorers);
          var goalsScored = 0;
          if (typeof scoresMap[i].team1scorers[playerName] === 'number') {
            goalsScored += scoresMap[i].team1scorers[playerName];
          } else if (typeof scoresMap[i].team2scorers[playerName] === 'number') {
            goalsScored += scoresMap[i].team2scorers[playerName];
          }
          if (goalsScored > 0) {
            newPlayerWeekGoals.innerHTML = goalsScored;
            newPlayerWeekGoals.style.backgroundImage = "url('/football2.png')";
            newPlayerWeekGoals.style.backgroundRepeat = "no-repeat";
            newPlayerWeekGoals.style.backgroundSize = "8px 8px";
            newPlayerWeekGoals.style.backgroundPosition = "center 0px";
            newPlayerWeekGoals.style.margin = "0px";
            newPlayerWeekGoals.style.padding = "5px 7px";
            newPlayerWeekGoals.style.border = "none";
          }
        }

        if (tabName == "attendance") {
          // use a custom attribute as attendance can be 3 values 
          //(team1 or team2, not played)
          if (playerName) {
            switch(availabilityMap[i]) {
              case 1:
                updateTeamShirt(newPlayerWeek, 1);
                break;
              case 2:
                updateTeamShirt(newPlayerWeek, 2);
                break;
              default:
                // do nothing
                if (availabilityMap[i]) {
                  updateTeamShirt(newPlayerWeek, 99);
                } else {
                  updateTeamShirt(newPlayerWeek, 0);
                }
            }
            newPlayerWeek.onclick = function(e) {toggleTeamShirt(e)};
            newPlayerWeekGoals.onclick = function(e) {toggleTeamShirt(e)};
          }

          // add ability to increase # of goals
          newPlayerName.onclick = function(e) {
            // check which weekEdit button is active
            var currentWeekId = -1;
            for (var i = 0; i < mondaysDates.length; i ++) {
              var weekEditButton = document.getElementById("week" + i + "Edit" + ATTENDANCE); 
              if (weekEditButton.getAttribute("toggleStatus") == "save") {
                // button toggled as Save so record editing week number
                currentWeekId = i;
              }
            }
            if (currentWeekId > -1) {
              // get the currentEditElement
              var playerIdPrefix = e.srcElement.id.replace(ATTENDANCE, "");
              var currentEditElement = document.getElementById(playerIdPrefix + "Week" + currentWeekId + ATTENDANCE + "Goals");
              var goalsScored = Number(currentEditElement.innerHTML);
              goalsScored++;
              if (goalsScored > 0) {
                currentEditElement.innerHTML = goalsScored;
              }
            };
          }
        }

        if (playerName) {
          // existing player so check as needed
          newPlayerWeek.disabled = true;
          if (availabilityMap && availabilityMap[i]) {
            newPlayerWeek.checked = true;
          } else {
            newPlayerWeek.checked = false;
          }
          //console.log(playerName + " " + mondaysDates[i] + "=" + availabilityMap[mondaysDates[i]])
        } else {
          // new player so assume default checked
          newPlayerWeek.checked = true;
        }
        if (weekHeader.getAttribute("bankHoliday")) {
          newPlayerWeek.setAttribute("type", "hidden"); 
          newPlayerWeek.checked = false;
        }

        if (tabName == "attendance") {
          var goalsOverlayDiv = document.createElement("text"); 
          goalsOverlayDiv.setAttribute("class", "image_wrapper_goals"); 
          weekHeader.appendChild(document.createElement("br"));
          goalsOverlayDiv.appendChild(newPlayerWeek);
          goalsOverlayDiv.appendChild(newPlayerWeekGoals);
          weekHeader.appendChild(goalsOverlayDiv);
        } else {
        //weekHeader.appendChild(document.createElement("br"));
          weekHeader.appendChild(newPlayerWeek);
          weekHeader.appendChild(newPlayerWeekGoals);
       }

      }


      if (tabName == "availability") {
        // create the edit button
        var newPlayerEditButton = document.createElement("button");
        newPlayerEditButton.type = "button";
        newPlayerEditButton.innerHTML = "Edit...";
        newPlayerEditButton.style.backgroundColor = "lightgreen";
        newPlayerEditButton.setAttribute("class", "editButton"); 
        newPlayerEditButton.setAttribute("id", "player" + currentPlayerNumber + "Edit" + tabName);
        //console.log("CREATED " + "player" + currentPlayerNumber + "Edit" + tabName);

        var editHeader = document.getElementById("editHeader" + tabName)
        editHeader.appendChild(document.createElement("br"));
        editHeader.appendChild(newPlayerEditButton);
        if (!playerName) {
          // new player so toggle Edit button to Save
          newPlayerEditButton.innerHTML = "Save";
        } else {
          //newPlayerEditButton.innerHTML = "<span>&#10003;</span>"; //Tick
        }
        newPlayerEditButton.onclick = function() {editPlayer(playerName, newPlayerEditButton)};
      }

      if (!playerName) {
        // new player so enable the save/cancel button, and disable
        document.getElementById("cancelEdit").disabled = false; 
        document.getElementById("cancelEdit").style.backgroundColor = "lightsalmon";
        for (var i = 0; i < currentPlayerNumber; i++) {

          ////// TODO - it's creating "attendance", but for some reason not "availability".  Need availability.

          document.getElementById("player" + i + "Edit" + tabName).disabled = true; 
          document.getElementById("player" + i + "Edit" + tabName).style.backgroundColor = "lightgrey";
        }
      // disable the addPlayer botton
      document.getElementById("addPlayer").disabled = true; 
      document.getElementById("addPlayer").style.backgroundColor = "lightgrey";
      }
      //calcWeeklyTotals(tabName);
      var minHeight = Math.max(600, 350 + (currentPlayerNumber * 35));
      document.getElementById("panels").style.minHeight = minHeight + "px";
  }

  function toggleTeamShirt(e) {
    // element could be the shirt or the goals
    var elementPrefix = e.srcElement.id.replace("Goals", "");
    // toggle the shirt
    var shirtElement = document.getElementById(elementPrefix);
    var nextValue = Number(shirtElement.getAttribute("teamValue")) + 1;
    if (nextValue > 2) {
      nextValue = 0;
    }
    updateTeamShirt(shirtElement, nextValue);
    // reset # of goals to 0
    var goalsElement = document.getElementById(elementPrefix + "Goals");
    goalsElement.innerHTML = "";
  }

  function updateTeamShirt(checkboxElement, newValue) {
    if (newValue == 0) {
      checkboxElement.style.background = "url(/black-cross.png)";
    } else if (newValue == 1) {
      checkboxElement.style.background = "url(/red-football-shirt.png)";
    } else if (newValue == 2) {
      checkboxElement.style.background = "url(/blue-football-shirt.png)";
    } else if (newValue == 99) {
      // temp option to cater for true (when played but unknown team)
      checkboxElement.style.background = "url(/tick.png)";
    }
    checkboxElement.setAttribute("teamValue", newValue);
    checkboxElement.setAttribute("class", "checkmark_blank");
    checkboxElement.style.backgroundRepeat = "no-repeat";
    checkboxElement.style.backgroundSize = "26px 28px";
    checkboxElement.style.margin = "0px";
    checkboxElement.style.padding = "5px 7px";
    checkboxElement.style.border = "none";
  };

  function saveCurrentEdittingWeek() {
    // check which weekEdit button is active
    for (var i = 0; i < mondaysDates.length; i ++) {
      var weekEditButton = document.getElementById("week" + i + "Edit" + ATTENDANCE); 
      if (weekEditButton.getAttribute("toggleStatus") == "save") {
        // button toggled as Save, so call editWeek(weekNumber) to save and toggle it back
        editWeek(i);
        return;
      }
    }
  }

  function editWeek(weekNumber) {
    var tabName = ATTENDANCE;
    var tabPlayerCount = playerCount[tabName];
    weekEditButton = document.getElementById("week" + weekNumber + "Edit" + tabName); 
    if (weekEditButton.getAttribute("toggleStatus") == "save") {
      // button toggled as Save, so save and put back to Edit move
      saveAttendance(weekNumber);
      weekEditButton.setAttribute("toggleStatus", "edit");
      // re-enable every player's player-status button
      for (var i = 0; i < tabPlayerCount; i++) {
        document.getElementById("player" + i + "Week" + weekNumber + tabName).setAttribute("class", "checkmark");
        document.getElementById("week" + weekNumber + "Score1" + tabName).disabled = true;
        document.getElementById("week" + weekNumber + "Score2" + tabName).disabled = true;
      }
      // reenable the other edit buttons
      mondaysDates = mondaysInMonth(pollDate.getMonth()+1, pollDate.getFullYear());  //=> [ 7,14,21,28 ]
      // auto generate divs for headers for each game week
      for (var i = 0; i < mondaysDates.length; i ++) {
        document.getElementById("week" + i + "Edit" + tabName).disabled = false; 

        // re-enable all of the other elements
        for (var j = 0; j < tabPlayerCount; j++) {
          document.getElementById("player" + j + "Week" + i + tabName).hidden = false;
          document.getElementById("player" + j + "Week" + i + tabName + "Goals").hidden = false;
          document.getElementById("week" + i + "Score1" + tabName).hidden = false;
          document.getElementById("week" + i + "ScoreSeparator" + tabName).hidden = false;
          document.getElementById("week" + i + "Score2" + tabName).hidden = false;
        }
      }
      document.getElementById("saveAttendanceButton").disabled = true;
      document.getElementById("cancelAttendanceEditButton").disabled = true;
      document.getElementById("closeMonthGeneratePaymentsButton").disabled = false;
      document.getElementById("cancelCheckboxDiv").hidden = true;
      return;
    }

    // button toggled as Edit, re-enable buttons
    chosenWeek = weekEditButton.id.split('Edit')[0]
    console.log("EDITING weekNumber: " + weekNumber + " chosenWeek:" + chosenWeek);
    // re-enable every player's player-status button
    for (var i = 0; i < tabPlayerCount; i++) {
      //document.getElementById("player" + i + "Week" + weekNumber + tabName).setAttribute("class", "checksecondary");
      document.getElementById("player" + i + "Week" + weekNumber + tabName).disabled = false;

        var team1Spinner = document.getElementById("week" + weekNumber + "Score1" + tabName);
        var team2Spinner = document.getElementById("week" + weekNumber + "Score2" + tabName);
        team1Spinner.disabled = false;
        team2Spinner.disabled = false;
        team1Spinner.style.width = "40px";
        team2Spinner.style.width = "40px";
        team1Spinner.style.backgroundColor = "coral";
        team2Spinner.style.backgroundColor = "dodgerblue";
    }
    
    // disable the other edit buttons
    mondaysDates = mondaysInMonth(pollDate.getMonth()+1, pollDate.getFullYear());  //=> [ 7,14,21,28 ]
    for (var i = 0; i < mondaysDates.length; i ++) {
      if (i != weekNumber) {
        document.getElementById("week" + i + "Edit" + tabName).disabled = true; 

        // hide all of the other elements
        for (var j = 0; j < tabPlayerCount; j++) {
          document.getElementById("player" + j + "Week" + i + tabName).hidden = true;
          document.getElementById("player" + j + "Week" + i + tabName + "Goals").hidden = true;
          document.getElementById("week" + i + "Score1" + tabName).hidden = true;
          document.getElementById("week" + i + "ScoreSeparator" + tabName).hidden = true;
          document.getElementById("week" + i + "Score2" + tabName).hidden = true;
        }
      }
    }
    document.getElementById("cancelCheckboxDiv").hidden = false;

    // button currently as Edit, so toggle to "save" mode
    weekEditButton.setAttribute("toggleStatus", "save"); 
    document.getElementById("saveAttendanceButton").disabled = false; 
    document.getElementById("cancelAttendanceEditButton").disabled = false;
    document.getElementById("closeMonthGeneratePaymentsButton").disabled = true;
    document.getElementById("closeMonthGeneratePaymentsButton").setAttribute("weekNumber", weekNumber);

    if (cancelledMap[weekNumber]) {
      document.getElementById("cancelCheckbox").checked = true;
      document.getElementById("cancelWeekDescription").hidden = false;
      document.getElementById("cancelWeekDescription").value = cancelledMap[weekNumber].description;
    } else {
      document.getElementById("cancelCheckbox").checked = false;
      document.getElementById("cancelWeekDescription").hidden = true;
      document.getElementById("cancelWeekDescription").value = "";
    }
  }

    function editPlayer(playerName, newPlayerEditButton) {
      var tabName = "availability";
      if (newPlayerEditButton.innerHTML == "Save") {
        // button toggled as Save, so save and put back to Edit move
        chosenPlayer = newPlayerEditButton.id.split('Edit')[0]
        savePlayer(chosenPlayer);
        newPlayerEditButton.innerHTML = "Edit...";
        newPlayerEditButton.disabled = false; 
        calcWeeklyTotals(tabName);
        return;
      }
      chosenPlayer = newPlayerEditButton.id.split('Edit')[0]
      console.log("EDITING Player: " + playerName + " ChosenPlayer:" + chosenPlayer);
      // disable everything
      var tabPlayerCount = playerCount[tabName];
      for (var i = 0; i < tabPlayerCount; i++) {
        document.getElementById("player" + i + tabName).disabled = true; 
        for (var j = 0; j < mondaysDates.length; j++) {
          document.getElementById("player" + i + "Week" + j + tabName).disabled = true; 
        }
        document.getElementById("player" + i + "Edit" + tabName).disabled = true; 
        document.getElementById("player" + i + "Edit" + tabName).style.backgroundColor = "lightgrey";
      }

      // store the current name before the editting (used if you blank the name to delete the player)
      var nameBeforeEdit = document.getElementById(chosenPlayer + tabName).value
      document.getElementById(chosenPlayer + tabName).setAttribute("nameBeforeEdit", nameBeforeEdit);

      // renable only the chosen Player
      document.getElementById(chosenPlayer + tabName).disabled = false; 
      for (var j = 0; j < mondaysDates.length; j++) {
        document.getElementById(chosenPlayer + "Week" + j + tabName).disabled = false; 
      }
      document.getElementById(chosenPlayer + "Edit" + tabName).disabled = false; 
      document.getElementById(chosenPlayer + "Edit" + tabName).style.backgroundColor = "lightgreen";
      // enable the cancel button
      document.getElementById("cancelEdit").disabled = false; 
      document.getElementById("cancelEdit").style.backgroundColor = "lightsalmon";
      // disable the addPlayer botton
      document.getElementById("addPlayer").disabled = true; 
      document.getElementById("addPlayer").style.backgroundColor = "lightgrey";

      // button currently as Edit, so toggle to "save" mode
      newPlayerEditButton.innerHTML = "Save";
      calcWeeklyTotals(tabName);
    }
    function delay(time) {
      return new Promise(resolve => setTimeout(resolve, time));
    }

    function cancelCurrentEdittingWeek() {
      var cancelDescElement = document.getElementById("cancelWeekDescription");
      cancelDescElement.hidden = !cancelDescElement.hidden;
      cancelDescElement.focus();
      cancelDescElement.select();
    }

    function saveAttendance(weekNumber) {
      // Save the data (using XMLHttpRequest)
      console.log("SAVING attendance for week: " + weekNumber);
      var tabName = "attendance";
      var gameDay = String(mondaysDates[weekNumber]).padStart(2, '0')
      var gameDateString = gameYear + "-" + gameMonth + "-" + gameDay;

      var playersAttended = {};
      var scores = {};
      var scorers = {1: {}, 2:{}};
      var status = {"status": "PLAYED", "date": gameDateString};;
      var saveType = "ATTENDANCE"

      if (document.getElementById("cancelCheckbox").checked) {
        //if (!confirm('This will mark the week as cancelled.\nAre you sure?')) return;
        // cancelling
        var description = document.getElementById("cancelWeekDescription").value;
        status = {"status": "CANCELLED", "description": description, "date": gameDateString};
      } else {
        // saving
        for (var i = 0; i < 999; i++) {
          var playerElement = document.getElementById("player" + i + tabName); 
          if (!playerElement) {
            //console.log("GOT NULL!");
            break;
          }
          var officialPlayerName = playerElement.getAttribute("title");
          var playerName = officialPlayerName;
          if (!officialPlayerName) {
            // new player - no official name yet so use the current value
            playerName = playerElement.value;
          }
          var playerAttended = Number(document.getElementById("player" + i + "Week" + weekNumber + tabName).getAttribute("teamValue"));

          var goalsScored = Number(document.getElementById("player" + i + "Week" + weekNumber + tabName + "Goals").innerHTML);
          if (goalsScored > 0) {
            scorers[playerAttended][playerName] = goalsScored;
          }

          playersAttended[playerName] = playerAttended;
          //console.log("PLAYER DETAILS: " + i + " " + officialPlayerName + " " + playerAttended);
        }

        // get the score for the game week
        var goals1 = Number(document.getElementById("week" + weekNumber + "Score1" + tabName).value); 
        var goals2 = Number(document.getElementById("week" + weekNumber + "Score2" + tabName).value); 
        var calcWinner = -1;
        if (goals1 == goals2) {
          calcWinner = 0; // draw
        } else if (goals1 > goals2) {
          calcWinner = 1; // team1 won
        } else if (goals1 < goals2) {
          calcWinner = 2; // team2 won
        }
        scores = {"winner": calcWinner, "team1goals": goals1, "team2goals": goals2, "team1scorers": scorers[1], "team2scorers": scorers[2]}
      }
      var attendanceDetails = { "gameYear": gameYear, "gameMonth": gameMonth, "gameDay": gameDay, "weekNumber": weekNumber, "playersAttended": playersAttended, "scores": scores, "status": status, "saveType": saveType };

      console.log("SAVING ATTENDANCE:" + JSON.stringify(attendanceDetails));

      // now send the POST request with the data
      var xmlhttp = new XMLHttpRequest();
      xmlhttp.onreadystatechange = function() {
        if (this.readyState == 4 && this.status == 200) {
          console.log("Saved response", this.responseText);
          location.reload(true);
        }
      };
      xmlhttp.open("POST", "/save-week-attendance");
      xmlhttp.setRequestHeader("Content-Type", "application/json");
      xmlhttp.send(JSON.stringify(attendanceDetails));
    }

    function savePlayer(playerId) {
      var tabName = "availability";
      // Save the data (using XMLHttpRequest)
      try {
        var playerName = document.getElementById(playerId + tabName).value;
        var originalPlayerName = document.getElementById(playerId + tabName).getAttribute("nameBeforeEdit");
        console.log("SAVING Player: " + playerName + " ChosenPlayer:" + playerId);

        // now loop through all saved players and pre-populate their availability
        var allPlayerDetails = {};
        var saveType = "UNKNOWN"
        // check if player is new, edited, or deleted
        console.log("LOOKUP: " + playerId + " Original Name: " + originalPlayerName);
        if (originalPlayerName) {
          console.log("EDITED: " + playerId + " Original Name: " + originalPlayerName);
          // if playername is empty then prefix the original name for deletion upon save
          if (playerName == "") {
            saveType = "DELETE"
            playerName = originalPlayerName;
          } else if (playerName != originalPlayerName) {
            saveType = "RENAME"
          } else {
            saveType = "EDIT"
          }
        } else {
          // if playername is empty then prefix the original name for deletion upon save
          if (playerName == "") {
            saveType = "DELETE"
            playerName = originalPlayerName;
          } else if (playerName != originalPlayerName) {
            saveType = "RENAME"
          } else {
            saveType = "NEW"
            console.log("NEW: " + playerId + " Original Name: " + originalPlayerName);
          }
        }

        var playerAvailability = {};
        if (playerName && playerName != "") {
          for (var j = 0; j < mondaysDates.length; j++) {
            var playerAvailable = document.getElementById(playerId + "Week" + j + tabName).checked
            playerAvailability[j] = playerAvailable;
          }
          allPlayerDetails[playerName] = playerAvailability;
        }

        var gamedetails = { "gameYear": gameYear, "gameMonth": gameMonth, "playerName": playerName, "playerAvailability": playerAvailability, "saveType": saveType, "originalPlayerName": originalPlayerName };

        console.log("SAVING:" + JSON.stringify(gamedetails));

        // now send the POST request with the data
        var xmlhttp = new XMLHttpRequest();
        xmlhttp.onreadystatechange = function() {
          if (this.readyState == 4 && this.status == 200) {
            console.log("Saved response", this.responseText);
            location.reload(true);
          }
        };
        xmlhttp.open("POST", "/save-availability");
        xmlhttp.setRequestHeader("Content-Type", "application/json");
        xmlhttp.send(JSON.stringify(gamedetails));
      } catch (error) {
        console.error('There has been a problem with the save-availability operation:', error);
        // log this error back to the server to help with debugging
        var xmlhttp = new XMLHttpRequest();
        xmlhttp.open("POST", "/logging");
        xmlhttp.setRequestHeader("Content-Type", "application/json");
        xmlhttp.send( JSON.stringify({ "error": error.stack }) );

        //location.reload(true);
      }
    } // end of savePlayers()

  </script>

  <%- include ("./admin-aliases.ejs") %>

</div>
</body>
</html>
