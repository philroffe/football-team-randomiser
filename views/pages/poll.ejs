<html>

<head>
<meta name="viewport" content="width=device-width, initial-scale=1">
<meta charset="UTF-8">

<link rel='stylesheet' id='bootstrap-style-css'  href='https://sheffield.digital/wp-content/themes/sd-litemag/assets/css/bootstrap.min.css?ver=4.9.8' type='text/css' media='all' />
<link rel='stylesheet' id='bluth-style-css'  href='https://sheffield.digital/wp-content/themes/sd-litemag/style.css?ver=4.9.8' type='text/css' media='all' />
<link rel="stylesheet" href="https://www.w3schools.com/w3css/4/w3.css">
<link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Oswald">
<link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Open Sans">
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">
<style>
h1,h2,h3,h4,h5,h6 {font-family: "Oswald"}
body {font-family: "Open Sans"}
</style>

<style>
@viewport {
  width: device-width ;
  zoom: 1.0 ;
}
pre {
   font-size: 90%;
}
.linkborder a:link, .emailHeader {
  background-color: #D5EDF6;
  color: #333333;
  padding: 2px 6px 2px 6px;
  border-top: 1px solid #D5EDF6;
  border-right: 1px solid #333333;
  border-bottom: 1px solid #333333;
  border-left: 1px solid #D5EDF6;
}
.gameheader  {
  float: left;
  padding: 2px 6px 2px 0px;
  margin: 0px;
}

.gameheader input,button{
  height: 30px;
  margin: 0px;
}
text {
  font-size: 10px;
  width:20em;
}
/* Create a custom checkbox */
.checkmark {
  top: 0;
  left: 0;
  height: 5px;
  width: 25px;
  background-color: #eee;
}
.gameMonthInput {
  font-size: 80%; 
  height: 30px;
  margin: 0px 0px 0px 20px;
}
</style>
</head>
<body class="w3-light-grey">

<!-- Navigation bar with social media icons -->
<div class="w3-bar w3-black w3-hide-small">
  <a href="/poll" class="w3-bar-item w3-button">Poll</a>
  <a href="/teams" class="w3-bar-item w3-button">Select Teams</a>
  <a href="https://goo.gl/maps/LCGbaK5RQD47CxXG8" class="w3-bar-item w3-button w3-right"><i>Map</i>  </a>
</div>

<div id="year">
  <h3>Choose Your Poll: 
  <input type="month" class="gameMonthInput" id="gameMonthInput" name="start" min="2022-03" value="2022-04">
  </h3>
</div>

<div id="description">Footie, 6pm every Monday, Goodwin, John Hawley Pitch</div>
<div id="location"><a href="https://goo.gl/maps/6CcWirgU6bVMEqbt8">Sport Sheffield, Northumberland Rd, Sheffield, S10 2TY</a></div>


<p><p><h3>Add/Edit Availability:</h3>
<div id="title">Not Yet Available</div>
<div id="divHeader">
<div id="nameHeader" class="gameheader"><br>Name</div>
</div>
<div id="editHeader" class="gameheader"><br></div>
<div style="clear:both;"></div>

<form id="playerForm">
 <div id="dynamicInput"></div>
</form>
<button id="addPlayer" style="background-color: #90EE90;" type="button" onclick="addPlayer();">(+) Add Player</button>
<button id="cancelEdit" onclick="location.reload()" disabled=true>Cancel</button>

  <script type="text/javascript">
    var monthDateFormat = new Intl.DateTimeFormat('en', { month: 'long' });
    var monthDateNumericFormat = new Intl.DateTimeFormat('en', { month: '2-digit' });
    var dayDateFormat = new Intl.DateTimeFormat('en', { day: '2-digit' });

    var playerCount = 0;
    var todayDate = new Date();
    var playerElements = {};
    var saving = true;

    // annoying workaround to some mumbo-jumbo to convert a valid object client-side ()
    var pagedata =  JSON.parse("<%= JSON.stringify(pageData) %>".replace(/&#34;/g, '"'));
    console.log('Data=' + JSON.stringify(pagedata));

    var selectedMonthDate = new Date(pagedata.data.gameid);
    var gameMonth = monthDateNumericFormat.format(selectedMonthDate);
    var gameYear = selectedMonthDate.getFullYear();

    var pollDate = new Date("01 " + monthDateFormat.format(todayDate) + " " + gameYear);
    console.log(pollDate);
    var gameMonthString = monthDateFormat.format(todayDate);
    // update the header month input selector
    document.getElementById("gameMonthInput").value = gameYear + "-" + gameMonth
    document.getElementById("gameMonthInput").addEventListener('change', function() {
      var selectedDate = document.getElementById("gameMonthInput").value
      document.location.href = '/poll?date=' + selectedDate + '-01'
    });

    var players = pagedata.data.players;
    if (!players) { players = {}; }

    function mondaysInMonth(m,y) {
      var days = new Date(y,m,0).getDate();
      var mondays =  new Date(m +'/01/'+ y).getDay();
      if (mondays != 1){
        mondays = 9 - mondays;
      }
      mondays = [mondays];
      //console.log(mondays);
      for (var i = mondays[0] + 7; i <= days; i += 7) {
        mondays.push(i);
      }
      return mondays;
    }

    mondaysDates = mondaysInMonth(pollDate.getMonth()+1, pollDate.getFullYear());  //=> [ 7,14,21,28 ]


    function getDayOfMonthSuffix(n) {
        //checkArgument(n >= 1 && n <= 31, "illegal day of month: " + n);
        if (n >= 11 && n <= 13) {
            return "th";
        }
        switch (n % 10) {
            case 1:  return "st";
            case 2:  return "nd";
            case 3:  return "rd";
            default: return "th";
        }
    }


    function createJsonDiff(obj1, obj2) {
      var ret = {};
      for(var i in obj2) {

    console.log("i="+i)
        if(!obj1.hasOwnProperty(i) || obj2[i] !== obj1[i]) {
          console.log("iprop="+i)
          ret[i] = obj2[i];
        }
      }
      return ret;
    };

    document.getElementById("title").innerHTML = "<b>" + monthDateFormat.format(pollDate) + ' ' + gameYear + "</b>"

    // auto generate divs for headers for each game week
    for (var i = 0; i < mondaysDates.length; i ++) {
      var newWeekHeader = document.createElement("div");
      newWeekHeader.setAttribute("id", "week" + i + "Header"); 
      newWeekHeader.setAttribute("class", "gameheader"); 
      // create a totals header...
      var newWeekTotal = document.createElement("i");
      newWeekTotal.setAttribute("id", "week" + i + "Total"); 
      newWeekTotal.innerHTML = "0"; 
      newWeekHeader.appendChild(newWeekTotal);
      newWeekHeader.appendChild(document.createElement("br"));
      // create a date header
      const weekDateHeader = document.createTextNode(mondaysDates[i] + getDayOfMonthSuffix(mondaysDates[i]));
      newWeekHeader.appendChild(weekDateHeader);
      divHeader.appendChild(newWeekHeader);  
    }

    console.log(pagedata.data.players);
    // now loop through all saved players and pre-populate their availability
    var allOriginalPlayers = {}
    Object.keys(players).sort().forEach(function(key) {
      //console.log('player=' + key + "___" + players[key]);
      playerName = key
      playerName = decodeHtml(key)
      playerAvailability = players[key]
      addPlayer(playerName, playerAvailability)
    });
    // populate the weekly total counts
    calcWeeklyTotals();

    // populate the weekly total counts
    function calcWeeklyTotals() {
      for (var j = 0; j < mondaysDates.length; j++) {
        var weekTotalSummary = document.getElementById("week" + j + "Total");
        weekTotalSummary.innerHTML = 0
        for (var i = 1; i <= playerCount; i++) {
          if (document.getElementById("player" + i + "Week" + j).checked) {
            weekTotalSummary.innerHTML = parseInt(weekTotalSummary.innerHTML) + 1;
          }
        }
      }
    }

    // simple function to decode special chars (such as apostrophies)
    function decodeHtml(html) {
        var txt = document.createElement("textarea");
        txt.innerHTML = html;
        return txt.value;
    }

    // add an additional text box and hook up listeners
    function addPlayer(playerName, availabilityMap) {
      playerCount++;
      if (playerCount > 30) {
        // set a max list of names (just to protect a little)
        return;
      }
      var form = document.getElementById("dynamicInput")
      var nameHeader = document.getElementById("nameHeader")
      
      // create a player text box
      var newPlayerName = document.createElement("input"); 
      newPlayerName.setAttribute("type", "text"); 
      newPlayerName.setAttribute("id", "player" + playerCount); 
      newPlayerName.setAttribute("name", "myPlayers[]"); 
      newPlayerName.style.width = 120;
      nameHeader.appendChild(document.createElement("br"));
      nameHeader.appendChild(newPlayerName);
      allOriginalPlayers["player" + playerCount] = playerName
      if (playerName) {
        newPlayerName.setAttribute("value", playerName); 
        newPlayerName.setAttribute("disabled", true); 
      } else {
        newPlayerName.setAttribute("value", "Your Name?"); 
        newPlayerName.focus();
        newPlayerName.select();
      }
      
      for (var i = 0; i < mondaysDates.length; i ++) {
        var weekHeader = document.getElementById("week" + i + "Header")
        var newPlayerWeek = document.createElement("input"); 
        newPlayerWeek.setAttribute("type", "checkbox"); 
        newPlayerWeek.setAttribute("class", "checkmark"); 
        newPlayerWeek.setAttribute("id", "player" + playerCount + "Week" + i); 
        newPlayerWeek.setAttribute("name", playerCount + "myPlayerWeek[]"); 
        if (playerName) {
          // existing player so check as needed
          newPlayerWeek.disabled = true;
          if (availabilityMap && availabilityMap[i]) {
            newPlayerWeek.checked = true;
          } else {
            newPlayerWeek.checked = false;
          }
          //console.log(playerName + " " + mondaysDates[i] + "=" + availabilityMap[mondaysDates[i]])
        } else {
          // new player so assume default checked
          newPlayerWeek.checked = true;
        }
        weekHeader.appendChild(document.createElement("br"));
        weekHeader.appendChild(newPlayerWeek);
      }

      // create the edit button
      var newPlayerEditButton = document.createElement("button");
      newPlayerEditButton.type = "button";
      newPlayerEditButton.innerHTML = "Edit...";
      newPlayerEditButton.style.backgroundColor = "lightgreen";
      newPlayerEditButton.setAttribute("id", "player" + playerCount + "Edit");

      var editHeader = document.getElementById("editHeader")
      editHeader.appendChild(document.createElement("br"));
      editHeader.appendChild(newPlayerEditButton);
      if (!playerName) {
        // new player so toggle Edit button to Save
        newPlayerEditButton.innerHTML = "Save";
      } else {
        //newPlayerEditButton.innerHTML = "<span>&#10003;</span>"; //Tick
      }
      newPlayerEditButton.onclick = function() {editPlayer(playerName, newPlayerEditButton)};

      if (!playerName) {
        // new player so enable the save/cancel button, and disable
        document.getElementById("cancelEdit").disabled = false; 
        document.getElementById("cancelEdit").style.backgroundColor = "lightsalmon";
        for (var i = 1; i <= playerCount-1; i++) {
          document.getElementById("player" + i + "Edit").disabled = true; 
          document.getElementById("player" + i + "Edit").style.backgroundColor = "lightgrey";
        }
      // disable the addPlayer botton
      document.getElementById("addPlayer").disabled = true; 
      document.getElementById("addPlayer").style.backgroundColor = "lightgrey";
      }
      //calcWeeklyTotals();
  }

    function editPlayer(playerName, newPlayerEditButton) {
      if (newPlayerEditButton.innerHTML == "Save") {
        // button toggled as Save, so save and put back to Edit move
        chosenPlayer = newPlayerEditButton.id.split('Edit')[0]
        savePlayer(chosenPlayer);
        newPlayerEditButton.innerHTML = "Edit...";
        newPlayerEditButton.disabled = false; 
        calcWeeklyTotals();
        return;
      }
      chosenPlayer = newPlayerEditButton.id.split('Edit')[0]
      console.log("EDITING Player: " + playerName + " ChosenPlayer:" + chosenPlayer);
      // disable everything
      for (var i = 1; i <= playerCount; i++) {
        document.getElementById("player" + i).disabled = true; 
        for (var j = 0; j < mondaysDates.length; j++) {
          document.getElementById("player" + i + "Week" + j).disabled = true; 
        }
        document.getElementById("player" + i + "Edit").disabled = true; 
        document.getElementById("player" + i + "Edit").style.backgroundColor = "lightgrey";
      }

      // renable only the chosen Player
      document.getElementById(chosenPlayer).disabled = false; 
      for (var j = 0; j < mondaysDates.length; j++) {
        document.getElementById(chosenPlayer + "Week" + j).disabled = false; 
      }
      document.getElementById(chosenPlayer + "Edit").disabled = false; 
      document.getElementById(chosenPlayer + "Edit").style.backgroundColor = "lightgreen";
      // enable the cancel button
      document.getElementById("cancelEdit").disabled = false; 
      document.getElementById("cancelEdit").style.backgroundColor = "lightsalmon";
      // disable the addPlayer botton
      document.getElementById("addPlayer").disabled = true; 
      document.getElementById("addPlayer").style.backgroundColor = "lightgrey";

      // button currently as Edit, so toggle to "save" mode
      newPlayerEditButton.innerHTML = "Save";
      calcWeeklyTotals();
    }
    function delay(time) {
      return new Promise(resolve => setTimeout(resolve, time));
    }

    function savePlayer(playerId) {
      var playerName = document.getElementById(playerId).value;
      var originalPlayerName = allOriginalPlayers[playerId];
      console.log("SAVING Player: " + playerName + " ChosenPlayer:" + playerId);

      // now loop through all saved players and pre-populate their availability
      var allPlayerDetails = {};
      var saveType = "UNKNOWN"
      // check if player is new, edited, or deleted
      console.log("LOOKUP: " + playerId + " Original Name: " + originalPlayerName);
      if (originalPlayerName) {
        console.log("EDITED: " + playerId + " Original Name: " + originalPlayerName);
        // if playername is empty then prefix the original name for deletion upon save
        if (playerName == "") {
          saveType = "DELETE"
          playerName = originalPlayerName;
        } else if (playerName != allOriginalPlayers) {
          saveType = "RENAME"
        }
      } else {
        saveType = "NEW"
        console.log("NEW: " + playerId + " Original Name: " + originalPlayerName);
      }

      if (playerName && playerName != "") {
        var playerAvailability = {};
        for (var j = 0; j < mondaysDates.length; j++) {
          var playerAvailable = document.getElementById(playerId + "Week" + j).checked
          playerAvailability[j] = playerAvailable;
        }
        allPlayerDetails[playerName] = playerAvailability;
      }

      var gamedetails = { "gameYear": gameYear, "gameMonth": gameMonth, "players": allPlayerDetails, "saveType": saveType, "originalPlayerName": originalPlayerName };

      console.log("SAVING:" + JSON.stringify(gamedetails));
      const options = {};
      // Now POST the data to save
      fetch("/save-result", {
        method: 'POST',
        body: JSON.stringify(gamedetails),
        headers: { 'Content-Type': 'application/json' }
       })
       .then( res => res.json() )
       .then( data => console.log(data) );

      console.log("SAVING:" + JSON.stringify(gamedetails));

      //(either disable everything, or might just be easier to reload the page)
      // disable everything
      for (var i = 1; i <= playerCount; i++) {
        document.getElementById("player" + i).disabled = true; 
        for (var j = 0; j < mondaysDates.length; j++) {
          document.getElementById("player" + i + "Week" + j).disabled = true; 
        }
        document.getElementById("player" + i + "Edit").disabled = false; 
        document.getElementById("player" + i + "Edit").style.backgroundColor = "lightgreen";
      }
      // re-enable the addPlayer botton
      document.getElementById("addPlayer").disabled = false; 
      document.getElementById("addPlayer").style.backgroundColor = "lightgreen";
      ///////////////
      // saved - disable the cancel button
      document.getElementById("cancelEdit").disabled = true; 
      document.getElementById("cancelEdit").style.backgroundColor = "lightgrey";
      // need to delay the reload by 500ms - with heroku it seems  to have a race condition on reload
      //delay(500).then(() => location.reload());
    }

  </script>

</body>
</html>
