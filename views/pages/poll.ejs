<html>
<head>
  <%- include ("../partials/header.ejs") %>
  <script src="/autocomplete.js"></script>
</head>

<body class="w3-light-grey">
  <%- include ("../partials/nav.ejs") %>
<!-- Page content -->
<div class="w3-content" style="max-width:2000px;margin-top:46px;margin-left: 10px;">

<div id="year">
  <h3>Month: 
  <input type="month" class="gameMonthInput" id="gameMonthInput" name="start" min="2022-03" value="2022-04">
  </h3>
</div>

<div id="description">Footie, 6pm Mondays, Goodwin, Sport Sheffield</div>
<div id="location"><a href="https://goo.gl/maps/6CcWirgU6bVMEqbt8">Northumberland Rd, Sheffield, S10 2TY</a></div>

<p><p><h3>Add/Edit Availability:</h3>
<div id="divHeader">
    <div id="nameHeader" class="gameheader"><br></div>
</div>
<div id="editHeader" class="gameheader"><br></div>
<div style="clear:both;"></div>

<form id="playerForm">
 <div id="dynamicInput"></div>
</form>
<button id="addPlayer" style="background-color: #90EE90;" type="button" onclick="addPlayer();">(+) Add Player</button>
<button id="cancelEdit" onclick="location.reload()" disabled=true>Cancel</button>
<p><p>Finished? <a href="/teams">Generate teams and email</a>, or view the <a href="/poll-log">log of poll entries.</a>.

  <script type="text/javascript">
    var monthDateFormat = new Intl.DateTimeFormat('en', { month: 'long' });
    var monthDateNumericFormat = new Intl.DateTimeFormat('en', { month: '2-digit' });
    var dayDateFormat = new Intl.DateTimeFormat('en', { day: '2-digit' });

    var playerCount = 0;
    var todayDate = new Date();
    var playerElements = {};
    var saving = true;

    // annoying workaround to some mumbo-jumbo to convert a valid object client-side ()
    var pagedata =  JSON.parse("<%= JSON.stringify(pageData) %>".replace(/&#34;/g, '"'));
    //console.log('Data=' + JSON.stringify(pagedata));
 
    var isAdmin = pagedata.isAdmin;

    var bankHolidaysJson = pagedata.bankHolidays;
    var selectedMonthDate = new Date(pagedata.data.gameid);
    var gameMonth = monthDateNumericFormat.format(selectedMonthDate);
    var gameYear = selectedMonthDate.getFullYear();
    var nextMonday = pagedata.data.nextMonday;
    var nextMondayDate = new Date(nextMonday);
 

    var pollDate = new Date("01 " + monthDateFormat.format(selectedMonthDate) + " " + gameYear);
    console.log(pollDate);
    var gameMonthString = monthDateFormat.format(nextMondayDate);
    var newMaxDate = new Date(nextMondayDate).setMonth(nextMondayDate.getMonth()+1)
     // update the header month input selector
    document.getElementById("gameMonthInput").max = gameYear + monthDateNumericFormat.format(newMaxDate)
    document.getElementById("gameMonthInput").value = gameYear + "-" + gameMonth
    document.getElementById("gameMonthInput").addEventListener('change', function() {
      var selectedDate = document.getElementById("gameMonthInput").value
      document.location.href = '/poll?date=' + selectedDate + '-01'
    });

    var players = pagedata.data.players;
    if (!players) { players = {}; }
    var attendance = pagedata.data.attendance;
    if (!attendance) { attendance = {}; }


    var aliases = {};
    aliases["Phil Roffe"] = [ "Phil R" ]
    aliases["Dan Atherton"] = [ "Dan A", "Dan" ]
    //aliases["Jon G"] = [ "Jon" ]

    var playerAliasMaps = pagedata.data.playerAliasMaps;
    //console.log("PLAYER ALIAS MAPS:" + JSON.stringify(playerAliasMaps));
    var playerToAliasMap = playerAliasMaps["playerToAliasMap"];
    var aliasToPlayerMap = playerAliasMaps["aliasToPlayerMap"];
    var playerNameSuggestions = Array.from(Object.keys(playerToAliasMap));
    //console.log("PLAYER NAME SUGGESTIONS:" + JSON.stringify(playerNameSuggestions));

    function mondaysInMonth(m,y) {
      var days = new Date(y,m,0).getDate();
      var mondays =  new Date(m +'/01/'+ y).getDay();
      if (mondays != 1){
        mondays = 9 - mondays;
      }
      mondays = [mondays];
      //console.log(mondays);
      for (var i = mondays[0] + 7; i <= days; i += 7) {
        mondays.push(i);
      }
      return mondays;
    }

    mondaysDates = mondaysInMonth(pollDate.getMonth()+1, pollDate.getFullYear());  //=> [ 7,14,21,28 ]


    function getDayOfMonthSuffix(n) {
        //checkArgument(n >= 1 && n <= 31, "illegal day of month: " + n);
        if (n >= 11 && n <= 13) {
            return "th";
        }
        switch (n % 10) {
            case 1:  return "st";
            case 2:  return "nd";
            case 3:  return "rd";
            default: return "th";
        }
    }

    // auto generate divs for headers for each game week
    for (var i = 0; i < mondaysDates.length; i ++) {
      var newWeekHeader = document.createElement("div");
      newWeekHeader.setAttribute("id", "week" + i + "Header"); 
      newWeekHeader.setAttribute("class", "gameheader"); 
      // create a totals header...
      var newWeekTotal = document.createElement("i");
      newWeekTotal.setAttribute("id", "week" + i + "Total"); 
      newWeekTotal.innerHTML = '0';
      newWeekHeader.appendChild(newWeekTotal);
      newWeekHeader.appendChild(document.createElement("br"));

      // check whether a bank holiday
      var isBankHoliday = false;
      var currentDateHeaderDate = new Date("2022-01-01 12:00:00");
      currentDateHeaderDate.setYear(pollDate.getFullYear());
      currentDateHeaderDate.setMonth(pollDate.getMonth())
      currentDateHeaderDate.setDate(mondaysDates[i])
      currentDateHeaderDate.setHours(12, 12, 12);

      Object.keys(bankHolidaysJson).forEach(function(key) {
        if (key == "england-and-wales") {
          for (var j = 0; j < bankHolidaysJson[key].events.length; j++) {
            var bankHolDate = new Date(bankHolidaysJson[key].events[j].date);
            if (bankHolDate.toISOString().split('T')[0] == currentDateHeaderDate.toISOString().split('T')[0]) {
              isBankHoliday = true;
            }
          }
        }
      });

      // create a date header
      currentDateHeader = mondaysDates[i] + getDayOfMonthSuffix(mondaysDates[i]);

      const weekDateHeader = document.createElement("i");
      if (isBankHoliday) {
        currentDateHeader = "<strike>" + currentDateHeader + "</strike>";
        newWeekHeader.setAttribute("bankHoliday", true);
      }
      weekDateHeader.innerHTML = currentDateHeader;
      newWeekHeader.appendChild(weekDateHeader);
      divHeader.appendChild(newWeekHeader);  

      if (isAdmin) {
        // create the edit button
        var weekEditButton = document.createElement("button");
        weekEditButton.innerHTML = "e";
        weekEditButton.style.backgroundColor = "lightgreen";
        weekEditButton.setAttribute("id", "week" + i + "Edit");
        weekEditButton.setAttribute("class", "rotated"); 
        const chosenEditWeek = i;
        weekEditButton.onclick = function() {editWeek(chosenEditWeek)};
        newWeekHeader.appendChild(document.createElement("br"));
        newWeekHeader.appendChild(weekEditButton);

        if (isBankHoliday) {
          weekEditButton.setAttribute("hidden", true); 
        }
      }
    }
    if (isAdmin) {
      // just add a dummy button to the name header to space it out
      var dummyAdminNameButton = document.createElement("button");
      dummyAdminNameButton.setAttribute("class", "noborder"); 
      dummyAdminNameButton.setAttribute("disabled", true); 
      nameHeader = document.getElementById("nameHeader")
      nameHeader.appendChild(document.createElement("br"));
      nameHeader.appendChild(dummyAdminNameButton);
    }

    console.log(pagedata.data.players);
    // now loop through all saved players and pre-populate their availability
    var allOriginalPlayers = {}
    Object.keys(players).sort().forEach(function(key) {
      console.log('player=' + key + "___" + players[key]);
      playerName = key
      playerName = decodeHtml(key)
      playerAvailability = players[key]
      var officialPlayerName = getOfficialNameFromAlias(key, aliasToPlayerMap);
      addPlayer(playerName, playerAvailability, officialPlayerName)
    });

    // create a spacer before adding the attendees only
    nameHeader.appendChild(document.createElement("br"));
    for (var i = 0; i < mondaysDates.length; i ++) {
      document.getElementById("week" + i + "Header").appendChild(document.createElement("br"));            
    }
    editHeader.appendChild(document.createElement("br"));

    // add the attendees only - any players in attendance that didn't add themselves as players
    for (var i = 0; i < mondaysDates.length; i ++) {
      var attendanceMap = attendance["week" + i];
      //attendanceMap[officialPlayerName]
      if (attendanceMap) {
        console.log('attendanceMap=' + i + "___" + JSON.stringify(attendanceMap));
        Object.keys(attendanceMap).sort().forEach(function(key) {
          var attendedOfficialPlayerName = key;
          // check matching attendee in the player list
          var foundMatch = false;
          for (var i = 1; i < 999; i++) {
            var playerElement = document.getElementById("player" + i); 
            if (playerElement == null) { break; }
            var officialPlayerName = playerElement.getAttribute("officialPlayerName");
            if (attendedOfficialPlayerName == officialPlayerName) {
              // attendee found in original player list, so skip
              foundMatch = true;
              break;
            }
          }
          if (!foundMatch) {
            // attendee not found in original player list, so add it to the bottom
            console.log("NOT MATCHED: " + foundMatch + " - " + attendedOfficialPlayerName + " " + officialPlayerName);
            addPlayer(attendedOfficialPlayerName, false, attendedOfficialPlayerName)
          }
        });
      }
    }


    // populate the weekly total counts
    calcWeeklyTotals();

    // populate the weekly total counts
    function calcWeeklyTotals() {
      for (var j = 0; j < mondaysDates.length; j++) {
        var weekTotalSummary = document.getElementById("week" + j + "Total");
        weekTotalSummary.innerHTML = 0

        var playerTotal = 0;
        var attendanceTotal = 0;
        var attendanceTotalText = ""
        for (var i = 1; i <= playerCount; i++) {
          if (document.getElementById("player" + i + "Week" + j).checked) {
            playerTotal++
            //weekTotalSummary.innerHTML = "(" + (parseInt(weekTotalSummary.innerHTML.replace("(", "").replace(")", "")) + 1) + ")";
          }
          if (isAdmin) {
            if (document.getElementById("player" + i + "WeekAdmin" + j).checked) {
              attendanceTotal++
              //weekTotalSummary.innerHTML = "(" + (parseInt(weekTotalSummary.innerHTML.replace("(", "").replace(")", "")) + 1) + ")";
            }
            attendanceTotalText = "/" + attendanceTotal;
          }
        }
        weekTotalSummary.innerHTML = "(" + playerTotal + attendanceTotalText + ")";
        //"(" + (parseInt(weekTotalSummary.innerHTML.replace("(", "").replace(")", "")) + 1) + ")";
      }
    }

    // simple function to decode special chars (such as apostrophies)
    function decodeHtml(html) {
        var txt = document.createElement("textarea");
        txt.innerHTML = html;
        return txt.value;
    }

    // get the official name from a map of aliases (using case insensitive search)
    function getOfficialNameFromAlias(nameToCheck, aliasToPlayerMap) {
      nameToCheck = nameToCheck.trim();
      var officialName = undefined;
      var fullAliasList = Object.keys(aliasToPlayerMap);
      for (var i = 0; i < fullAliasList.length; i++) { 
        if (nameToCheck.toUpperCase() == fullAliasList[i].toUpperCase()) {
          officialName = aliasToPlayerMap[nameToCheck.toUpperCase()]
        }
      }
      if (!officialName) {
        console.error("ERROR: Failed to find official name for:", nameToCheck);
      }
      return officialName;
    }

    // add an additional text box and hook up listeners
    function addPlayer(playerName, availabilityMap, officialPlayerName) {
      playerCount++;
      if (playerCount > 30) {
        // set a max list of names (just to protect a little)
        return;
      }
      var form = document.getElementById("dynamicInput")
      var nameHeader = document.getElementById("nameHeader")
      
      // create a player text box
      var newPlayerName = document.createElement("input"); 
      newPlayerName.setAttribute("type", "text"); 
      newPlayerName.setAttribute("id", "player" + playerCount); 
      newPlayerName.setAttribute("officialPlayerName", officialPlayerName); 
      newPlayerName.setAttribute("name", "myPlayers[]"); 
      newPlayerName.style.width = 90;
      // create an autocomplete div to add the player input to
      newPlayerName.setAttribute("autocomplete", "off"); 
      autocomplete(newPlayerName, playerNameSuggestions);
      var newPlayerDiv = document.createElement("div"); 
      newPlayerDiv.setAttribute("class", "autocomplete"); 
      newPlayerDiv.appendChild(newPlayerName);
      // add the div to the nameHeader element to add it to the page
      nameHeader.appendChild(document.createElement("br"));
      nameHeader.appendChild(newPlayerDiv);

      // Determine whether input should be editable
      allOriginalPlayers["player" + playerCount] = playerName
      if (playerName) {
        newPlayerName.setAttribute("value", playerName); 
        newPlayerName.setAttribute("disabled", true); 
      } else {
        newPlayerName.setAttribute("placeholder", "Your Name?"); 
        newPlayerName.focus();
        newPlayerName.select();
      }

      if (isAdmin) {
        // add Admin ability for the name column
        var officialPlayerHeader = document.createElement("input");
        officialPlayerHeader.value = "Played?";
        officialPlayerHeader.style.width = 120;
        newPlayerName.style.width = 120; // also set the newPlayerName input to match
        officialPlayerHeader.style.fontSize = "0.9em";
        officialPlayerHeader.setAttribute("class", "noborder"); 
        officialPlayerHeader.setAttribute("disabled", true); 
        nameHeader.appendChild(document.createElement("br"));
        nameHeader.appendChild(officialPlayerHeader);
        nameHeader.appendChild(document.createElement("br"));
      }
      
      for (var i = 0; i < mondaysDates.length; i ++) {
        var weekHeader = document.getElementById("week" + i + "Header")
        var newPlayerWeek = document.createElement("input"); 
        newPlayerWeek.setAttribute("type", "checkbox"); 
        newPlayerWeek.setAttribute("class", "checkmark"); 
        newPlayerWeek.setAttribute("id", "player" + playerCount + "Week" + i); 
        newPlayerWeek.setAttribute("name", playerCount + "myPlayerWeek[]"); 
        if (playerName) {
          // existing player so check as needed
          newPlayerWeek.disabled = true;
          if (availabilityMap && availabilityMap[i]) {
            newPlayerWeek.checked = true;
          } else {
            newPlayerWeek.checked = false;
          }
          //console.log(playerName + " " + mondaysDates[i] + "=" + availabilityMap[mondaysDates[i]])
        } else {
          // new player so assume default checked
          newPlayerWeek.checked = true;
        }
        if (weekHeader.getAttribute("bankHoliday")) {
          newPlayerWeek.setAttribute("type", "hidden"); 
          newPlayerWeek.checked = false;
        }
        weekHeader.appendChild(document.createElement("br"));
        weekHeader.appendChild(newPlayerWeek);


        if (isAdmin) {
          // add Admin capability for the game week columns
          var newPlayerWeekAdmin = document.createElement("input"); 
          newPlayerWeekAdmin.setAttribute("type", "checkbox"); 
          newPlayerWeekAdmin.setAttribute("class", "checkmark"); 
          newPlayerWeekAdmin.setAttribute("id", "player" + playerCount + "WeekAdmin" + i); 
          newPlayerWeekAdmin.setAttribute("name", playerCount + "myPlayerWeekAdmin[]"); 
          newPlayerWeekAdmin.disabled = true;
          if (attendance["week" + i]) {
            //console.log(attendance["week" + i][playerName])
            newPlayerWeekAdmin.checked = attendance["week" + i][officialPlayerName];
          }
          //newPlayerWeekAdmin.setAttribute("disabled", true); 
          weekHeader.appendChild(document.createElement("br"));
          weekHeader.appendChild(newPlayerWeekAdmin);
          weekHeader.appendChild(document.createElement("br"));

          if (weekHeader.getAttribute("bankHoliday")) {
            newPlayerWeekAdmin.setAttribute("type", "hidden"); 
            newPlayerWeekAdmin.checked = false;
          }
        }
      }

      // create the edit button
      var newPlayerEditButton = document.createElement("button");
      newPlayerEditButton.type = "button";
      newPlayerEditButton.innerHTML = "Edit...";
      newPlayerEditButton.style.backgroundColor = "lightgreen";
      newPlayerEditButton.setAttribute("id", "player" + playerCount + "Edit");

      var editHeader = document.getElementById("editHeader")
      editHeader.appendChild(document.createElement("br"));
      editHeader.appendChild(newPlayerEditButton);
      if (!playerName) {
        // new player so toggle Edit button to Save
        newPlayerEditButton.innerHTML = "Save";
      } else {
        //newPlayerEditButton.innerHTML = "<span>&#10003;</span>"; //Tick
      }
      newPlayerEditButton.onclick = function() {editPlayer(playerName, newPlayerEditButton)};

      if (isAdmin) {
        // add Admin capability for the edit column
        var newAdminEditHeader = document.createElement("input");
        newAdminEditHeader.value = "";
        newAdminEditHeader.style.width = 10;
        newAdminEditHeader.setAttribute("class", "noborder"); 
        newAdminEditHeader.setAttribute("disabled", true); 
        editHeader.appendChild(document.createElement("br"));
        editHeader.appendChild(newAdminEditHeader);
        editHeader.appendChild(document.createElement("br"));
        // now hide the edit button per player (replaced with single admin save)
        newPlayerEditButton.setAttribute("hidden", true); 
        document.getElementById("addPlayer").hidden = true; 
      } else {
        document.getElementById("addPlayer").hidden = false; 
      }

      if (!playerName) {
        // new player so enable the save/cancel button, and disable
        document.getElementById("cancelEdit").disabled = false; 
        document.getElementById("cancelEdit").style.backgroundColor = "lightsalmon";
        for (var i = 1; i <= playerCount-1; i++) {
          document.getElementById("player" + i + "Edit").disabled = true; 
          document.getElementById("player" + i + "Edit").style.backgroundColor = "lightgrey";
        }
      // disable the addPlayer botton
      document.getElementById("addPlayer").disabled = true; 
      document.getElementById("addPlayer").style.backgroundColor = "lightgrey";
      }
      //calcWeeklyTotals();
  }

  function editWeek(weekNumber) {
    weekEditButton = document.getElementById("week" + weekNumber + "Edit"); 
    if (weekEditButton.innerHTML == "s") {
      // button toggled as Save, so save and put back to Edit move
      saveAttendance(weekNumber);
      weekEditButton.innerHTML = "e";
      // re-enable every player's player-status button
      for (var i = 1; i <= playerCount; i++) {
        document.getElementById("player" + i + "WeekAdmin" + weekNumber).disabled = true; 
        document.getElementById("player" + i + "Week" + weekNumber).setAttribute("class", "checkmark");
      }
      // reenable the other edit buttons
      mondaysDates = mondaysInMonth(pollDate.getMonth()+1, pollDate.getFullYear());  //=> [ 7,14,21,28 ]
      // auto generate divs for headers for each game week
      for (var i = 0; i < mondaysDates.length; i ++) {
        document.getElementById("week" + i + "Edit").disabled = false; 

        // re-enable all of the other elements
        for (var j = 1; j <= playerCount; j++) {
          document.getElementById("player" + j + "Week" + i).hidden = false;
          document.getElementById("player" + j + "WeekAdmin" + i).hidden = false; 
        }
      }
      return;
    }

    // button toggled as Edit, re-enable buttons
    chosenWeek = weekEditButton.id.split('Edit')[0]
    console.log("EDITING weekNumber: " + weekNumber + " chosenWeek:" + chosenWeek);
    // re-enable every player's player-status button
    for (var i = 1; i <= playerCount; i++) {
      document.getElementById("player" + i + "WeekAdmin" + weekNumber).disabled = false; 
      document.getElementById("player" + i + "Week" + weekNumber).setAttribute("class", "checksecondary");
    }
    
    // disable the other edit buttons
    mondaysDates = mondaysInMonth(pollDate.getMonth()+1, pollDate.getFullYear());  //=> [ 7,14,21,28 ]
    for (var i = 0; i < mondaysDates.length; i ++) {
      if (i != weekNumber) {
        document.getElementById("week" + i + "Edit").disabled = true; 

        // hide all of the other elements
        for (var j = 1; j <= playerCount; j++) {
          document.getElementById("player" + j + "Week" + i).hidden = true;
          document.getElementById("player" + j + "WeekAdmin" + i).hidden = true; 
        }
      }
    }

    // button currently as Edit, so toggle to "save" mode
    weekEditButton.innerHTML = "s";
  }

    function editPlayer(playerName, newPlayerEditButton) {
      if (newPlayerEditButton.innerHTML == "Save") {
        // button toggled as Save, so save and put back to Edit move
        chosenPlayer = newPlayerEditButton.id.split('Edit')[0]
        savePlayer(chosenPlayer);
        newPlayerEditButton.innerHTML = "Edit...";
        newPlayerEditButton.disabled = false; 
        calcWeeklyTotals();
        return;
      }
      chosenPlayer = newPlayerEditButton.id.split('Edit')[0]
      console.log("EDITING Player: " + playerName + " ChosenPlayer:" + chosenPlayer);
      // disable everything
      for (var i = 1; i <= playerCount; i++) {
        document.getElementById("player" + i).disabled = true; 
        for (var j = 0; j < mondaysDates.length; j++) {
          document.getElementById("player" + i + "Week" + j).disabled = true; 
        }
        document.getElementById("player" + i + "Edit").disabled = true; 
        document.getElementById("player" + i + "Edit").style.backgroundColor = "lightgrey";
      }

      // renable only the chosen Player
      document.getElementById(chosenPlayer).disabled = false; 
      for (var j = 0; j < mondaysDates.length; j++) {
        document.getElementById(chosenPlayer + "Week" + j).disabled = false; 
      }
      document.getElementById(chosenPlayer + "Edit").disabled = false; 
      document.getElementById(chosenPlayer + "Edit").style.backgroundColor = "lightgreen";
      // enable the cancel button
      document.getElementById("cancelEdit").disabled = false; 
      document.getElementById("cancelEdit").style.backgroundColor = "lightsalmon";
      // disable the addPlayer botton
      document.getElementById("addPlayer").disabled = true; 
      document.getElementById("addPlayer").style.backgroundColor = "lightgrey";

      // button currently as Edit, so toggle to "save" mode
      newPlayerEditButton.innerHTML = "Save";
      calcWeeklyTotals();
    }
    function delay(time) {
      return new Promise(resolve => setTimeout(resolve, time));
    }

    function saveAttendance(weekNumber) {
      // Save the data (using XMLHttpRequest)
      console.log("SAVING attendance for week: " + weekNumber);

      var playersAttended = {};
      var saveType = "ATTENDANCE"
      for (var i = 1; i < 999; i++) {
        var playerElement = document.getElementById("player" + i); 
        if (playerElement == null) {
          break;
        }
        var officialPlayerName = playerElement.getAttribute("officialPlayerName");
        var playerAttended = document.getElementById("player" + i + "WeekAdmin" + weekNumber).checked; 
        playersAttended[officialPlayerName] = playerAttended;
        //console.log(i + " " + officialPlayerName + " " + playerAttended);
      }

      var attendanceDetails = { "gameYear": gameYear, "gameMonth": gameMonth, "gameWeek": weekNumber, "playersAttended": playersAttended, "saveType": saveType, };

      console.log("SAVING ATTENDANCE:" + JSON.stringify(attendanceDetails));

      // now send the POST request with the data
      var xmlhttp = new XMLHttpRequest();
      xmlhttp.onreadystatechange = function() {
        if (this.readyState == 4 && this.status == 200) {
          console.log("Saved response", this.responseText);
          location.reload(true);
        }
      };
      xmlhttp.open("POST", "/save-week-attendance");
      xmlhttp.setRequestHeader("Content-Type", "application/json");
      xmlhttp.send(JSON.stringify(attendanceDetails));
    }

    function savePlayer(playerId) {
      // Save the data (using XMLHttpRequest)
      try {
        var playerName = document.getElementById(playerId).value;
        var originalPlayerName = allOriginalPlayers[playerId];
        console.log("SAVING Player: " + playerName + " ChosenPlayer:" + playerId);

        // now loop through all saved players and pre-populate their availability
        var allPlayerDetails = {};
        var saveType = "UNKNOWN"
        // check if player is new, edited, or deleted
        console.log("LOOKUP: " + playerId + " Original Name: " + originalPlayerName);
        if (originalPlayerName) {
          console.log("EDITED: " + playerId + " Original Name: " + originalPlayerName);
          // if playername is empty then prefix the original name for deletion upon save
          if (playerName == "") {
            saveType = "DELETE"
            playerName = originalPlayerName;
          } else if (playerName != originalPlayerName) {
            saveType = "RENAME"
          } else {
            saveType = "EDIT"
          }
        } else {
          saveType = "NEW"
          console.log("NEW: " + playerId + " Original Name: " + originalPlayerName);
        }

        if (playerName && playerName != "") {
          var playerAvailability = {};
          for (var j = 0; j < mondaysDates.length; j++) {
            var playerAvailable = document.getElementById(playerId + "Week" + j).checked
            playerAvailability[j] = playerAvailable;
          }
          allPlayerDetails[playerName] = playerAvailability;
        }

        var gamedetails = { "gameYear": gameYear, "gameMonth": gameMonth, "playerName": playerName, "playerAvailability": playerAvailability, "saveType": saveType, "originalPlayerName": originalPlayerName };

        console.log("SAVING:" + JSON.stringify(gamedetails));

        // now send the POST request with the data
        var xmlhttp = new XMLHttpRequest();
        xmlhttp.onreadystatechange = function() {
          if (this.readyState == 4 && this.status == 200) {
            console.log("Saved response", this.responseText);
            location.reload(true);
          }
        };
        xmlhttp.open("POST", "/save-result");
        xmlhttp.setRequestHeader("Content-Type", "application/json");
        xmlhttp.send(JSON.stringify(gamedetails));
      } catch (error) {
        console.error('There has been a problem with the save-result operation:', error);
        // log this error back to the server to help with debugging
        var xmlhttp = new XMLHttpRequest();
        xmlhttp.open("POST", "/logging");
        xmlhttp.setRequestHeader("Content-Type", "application/json");
        xmlhttp.send( JSON.stringify({ "error": error.stack }) );

        //location.reload(true);
      }
    } // end of savePlayers()

  </script>

</body>
</html>
